<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19">

    
  <!-- Spot Style - Load panorama -->
  <style name="IconLoadpanorama"
         url="%FIRSTXML%/spots/hotspot_direction_sequence_user_defaultpoint5.png"
         visible="false"
         frame="0"
         lastframe="11"
         framewidth="50"
         frameheight="50"
         stopspotsequence="false"
         crop="0|0|50|50"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconLoadpanorama"
         onout="onoutIconLoadpanorama"


         />

  <action name="onhoverIconLoadpanorama">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconLoadpanorama">
    hideTooltip();



  </action>



    
  <!-- Spot Style - Load panorama -->
  <style name="IconLoadpanorama"
         url="%FIRSTXML%/spots/hotspot_image_user_defaultpoint51.png"
         visible="false"
         onhover="onhoverIconLoadpanorama"
         onout="onoutIconLoadpanorama"


         />

  <action name="onhoverIconLoadpanorama">
    showtooltip('hotspot');
  </action>


  <action name="onoutIconLoadpanorama">
    hideTooltip();



  </action>



  <!-- unsupported kind of display : PointMap -->


<!-- ********** -->
<!-- Doble click -->
<!-- id : doubleclick -->
<!-- ********** -->

  <plugin name="doubleclick" url.flash="%FIRSTXML%/graphics/doubleclick/fieldofview_dc.swf" url.html5="%FIRSTXML%/graphics/doubleclick/dctouch.min.js" keep="true" ondblclick="doubleclick_ondoubleclick();"/>
  <action name="doubleclick_ondoubleclick">switchFullscreen();


  </action>

<!-- ********** -->
<!-- MenÃº contextual -->
<!-- id : contextmenu -->
<!-- ********** -->
  <contextmenu fullscreen="false" versioninfo="false" touch="true">
    <item name="author" onclick="getmessage(urltoopen,project_author_url);openurl(get(urltoopen),_blank);" />
    <item name="normal"        onclick="setViewNormal();
" separator="true"/>
    <item name="fullscreenentry" onclick="enterFullscreen();
" separator="true"/>
    <item name="vrmodeentry" onclick="js(accessWebVr());
" />
  </contextmenu>

  <events name="contextmenuevents" keep="true" 
    onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" 
    onxmlcomplete="updateContextMenu" 
    changetourlanguage="updateContextMenu" 
    />
  <events name="contextmenuvrevents" keep="true" 
    onvravailable="updateContextMenu();" onvrunavailable="updateContextMenu();"
    devices="html5"
    />
  <action name="updateContextMenu">
    getmessage(contextmenu.item[author].caption, project_author_name);
    getmessage(contextmenu.item[normal].caption, contextmenunormallabel);
    set(sceneisfull360, false);
    if(scene[get(xml.scene)].full360,
      sub(viewhfov, panoview.hmax, panoview.hmin);
      if (viewhfov == 360,
        sub(viewvfov, panoview.vmax, panoview.vmin);
        if (viewvfov == 180,
          set(sceneisfull360, true);
        );
      );
    );
    if (sceneisfull360 AND (device.webgl OR device.flash),
    ,
    );
    if (device.fullscreensupport,
      if(tour_fullscreen,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenucloseFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, exitFullscreen();
);
       ,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenuopenFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, enterFullscreen();
);
      );
     ,
      set(contextmenu.item[fullscreenentry].visible, false);
    );
    if (device.html5 AND tour_vrdevices,
      getmessage(contextmenu.item[vrmodeentry].caption, contextmenuopenVrLabel);
      set(contextmenu.item[vrmodeentry].onclick, js(accessWebVr());
);
     ,
      set(contextmenu.item[vrmodeentry].visible, false);
    );
  </action>

<!-- ********* -->
<!-- Gyroscope -->
<!-- ********* -->



<plugin name="gyroscope"
        url="%FIRSTXML%/graphics/gyro2.js"
        keep="true"
        devices="no-desktop.and.html5"

        onunavailable="checkGyroUnavailable();"
        sensor_mode="1"
        friction="auto"
        autocalibration="true"
        touch_mode="full"
        onavailable="delayedcall(1, checkGyroAvailability(););"
        enabled="false"
        activated="false"
        />

<events name="gyroscopeEvents" onnewpano="planarGyroscopeTest();" keep="true" />

<action name="planarGyroscopeTest">
  if(plugin[gyroscope],
          if(scene[get(xml.scene)].full360,
            set(sceneisfull360, false);
            sub(viewhfov, panoview.hmax, panoview.hmin);
            if (viewhfov == 360,
              sub(viewvfov, panoview.vmax, panoview.vmin);
              if (viewvfov == 180,
                set(sceneisfull360, true);
              );
            );
            if (sceneisfull360,
              set(plugin[gyroscope].camroll, true);
            ,
              set(plugin[gyroscope].camroll, false);
            );
          ,
            set(plugin[gyroscope].camroll, false);
          );
  );
</action>

<action name="changeGyroscopeState">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
        if(%1,
          set(plugin[gyroscope].activated,true);
        ,
          set(plugin[gyroscope].activated,false);
        );
        if (%1 !=  plugin[gyroscope].enabled,
          if(plugin[gyroscope].activated,
            switch(plugin[gyroscope].enabled);
          ,
            set(plugin[gyroscope].enabled, false);
          );
          if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
        );
    );
  );
</action>

<action name="checkGyroAvailability">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
        
        switch(plugin[gyroscope].enabled);
        set(plugin[gyroscope].activated,true);
        
        set(tour_gyroscopedevices, true);
        events.dispatch(ongyroscopeavailable);
    ,
      set(tour_gyroscopedevices, false);
    );
    if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
  ,
    checkGyroUnavailable();
  );
</action>

<action name="checkGyroUnavailable">
  set(plugin[gyroscope].activated, false);
  set(plugin[gyroscope].enabled, false);
  set(tour_gyroscopedevices, false);
  events.dispatch(ongyroscopeunavailable);
</action>

<!-- ********** -->
<!-- Barra de control D-pad -->
<!-- id : controlBar_dpad -->
<!-- ********** -->

<krpano controlBar_dpadbarbuilt="false" controlBar_dpadhorizontalwidth="0" controlBar_dpadverticalheight="0" controlBar_dpadIsOpened="false" />

<events name="controlBar_dpadevents" 
	onxmlcomplete="controlBar_dpadbuildMenuBar();" 


	keep="true" />



<action name="controlBar_dpadbuildMenuBar">
	ifnot (controlBar_dpadbarbuilt, controlBar_dpadbuildMenu(); set(controlBar_dpadbarbuilt, true););
</action>

<action name="controlBar_dpadbuildMenu">
	
	
	
	set(controlBar_dpadbutton_pos, 10);


	if(plugin[ptpvrmode] AND device.html5,
		set(layer[controlBar_dpadbtn_enter_vr].y, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadbtn_enter_vr_not].y, get(controlBar_dpadbutton_pos));
		inc(controlBar_dpadbutton_pos, 40);
	);


		if (device.fullscreensupport,
			set(layer[controlBar_dpadbtn_openfs].y, get(controlBar_dpadbutton_pos));
			set(layer[controlBar_dpadbtn_closefs].y, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
		);
	
		if (device.desktop,
			set(layer[controlBar_dpadbtn_ctrlmode_drag_to].y, get(controlBar_dpadbutton_pos));
			set(layer[controlBar_dpadbtn_ctrlmode_move_to].y, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
		);
	

		if(plugin[gyroscope],
			set(controlBar_dpadDisplayGyroscopeButton, false);
			if (device.tablet, set(controlBar_dpadDisplayGyroscopeButton, true););
			if (device.mobile, set(controlBar_dpadDisplayGyroscopeButton, true););
			if(controlBar_dpadDisplayGyroscopeButton,
				set(layer[controlBar_dpadbtn_gyroscope_on].y, get(controlBar_dpadbutton_pos));
				set(layer[controlBar_dpadbtn_gyroscope_off].y, get(controlBar_dpadbutton_pos));
				set(layer[controlBar_dpadbtn_gyroscope_not].y, get(controlBar_dpadbutton_pos));
				inc(controlBar_dpadbutton_pos, 40);
			);
		);

	
		if (device.desktop,
			set(layer[controlBar_dpadbtn_out].y, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
				set(layer[controlBar_dpadzoom_slider_bg].y, get(controlBar_dpadbutton_pos));
				inc(controlBar_dpadbutton_pos, 70);
			set(layer[controlBar_dpadbtn_in].y, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
		);
	
		set(layer[controlBar_dpadbtn_autorotate_on ].y, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadbtn_autorotate_off].y, get(controlBar_dpadbutton_pos));
		inc(controlBar_dpadbutton_pos, 40);
	

		set(layer[controlBar_dpadbtn_autotour_on ].y, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadbtn_autotour_off].y, get(controlBar_dpadbutton_pos));
		inc(controlBar_dpadbutton_pos, 40);
	

	
	if (controlBar_dpadbutton_pos != 10,
		set(layer[controlBar_dpadmenu_vertical_bg].height, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadmenu_vertical_bg_border].height, get(controlBar_dpadbutton_pos));
		set(controlBar_dpadverticalheight, get(controlBar_dpadbutton_pos));


	,
		set(layer[controlBar_dpadmenu_vertical_bg].height, 0);
		set(layer[controlBar_dpadmenu_vertical_bg_border].height, 0);


	);
	
	
	
	set(controlBar_dpadbutton_pos, 10);
	
		set(layer[controlBar_dpadbtn_home].x, get(controlBar_dpadbutton_pos));
		inc(controlBar_dpadbutton_pos, 40);
	
		if (scene.count GT 1,
			set(layer[controlBar_dpadbtn_prev_pano].x, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
			
			set(layer[controlBar_dpadbtn_next_pano].x, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
		);
	


	
		set(layer[controlBar_dpadbtn_show_thumbnails].x, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadbtn_hide_thumbnails].x, get(controlBar_dpadbutton_pos));
		inc(controlBar_dpadbutton_pos, 40);
	
	

	
	
		set(layer[controlBar_dpadbtn_share].x, get(controlBar_dpadbutton_pos));
		inc(controlBar_dpadbutton_pos, 40);
	

	
	
	if (controlBar_dpadbutton_pos != 10,
		set(layer[controlBar_dpadmenu_horizontal_bg].width, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadmenu_horizontal_bg_border].width, get(controlBar_dpadbutton_pos));
		set(controlBar_dpadhorizontalwidth, get(controlBar_dpadbutton_pos));
	,
		set(layer[controlBar_dpadmenu_horizontal_bg].width, 0);
	);
	
	
	
	
</action>


<events name="controlBar_dpadStartTourEvents" onTourStart="controlBar_dpadCallOnStartTour();" keep="true" />

<action name="controlBar_dpadCallOnStartTour">
	
	controlBar_dpadshowMenuControls();
</action>




<style name="controlBar_dpadbtn_vertical_style"
	keep="true"
	align="bottom"
	onhover="controlBar_dpadshowVerticalMenuTooltip();"
	onout="hideTooltip();"
	crop="0|0|30|30"
	onovercrop="0|30|30|30"
	ondowncrop="0|60|30|30"
	x="0"
	/>
<style name="controlBar_dpadbtn_vertical_style_off"
	keep="true"
	align="bottom"
	onhover="controlBar_dpadshowVerticalMenuTooltip();"
	onout="hideTooltip();"
	x="0"
	/>
<style name="controlBar_dpadbtn_vertical_style_alpha"
	alpha="1.0"
	devices="tablet.or.mobile"
	/>
<style name="controlBar_dpadbtn_vertical_style_alpha"
	alpha="0.2"
	devices="desktop"
	/>

<style name="controlBar_dpadmenu_bg_alpha"
	alpha="0.2"
	devices="desktop"
	/>
<style name="controlBar_dpadmenu_bg_alpha"
	alpha="0.5"
	devices="tablet.or.mobile"
	/>

<layer name="controlBar_dpadmenu_vertical_bg"
	url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_vertical.png"
	keep="true"
	align="bottomright"
	x="64"
	y="178"
	edge="bottom"
	zorder="4"
	scale9grid="12|10|3|40"
	style="controlBar_dpadmenu_bg_alpha"
	visible="false"
	/>

<layer name="controlBar_dpadmenu_vertical_bg_border"
	url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_border_vertical.png"
	keep="true"
	align="bottomright"
	x="64"
	y="178"
	edge="bottom"
	zorder="5"
	scale9grid="12|10|3|40"
	onout="controlBar_dpadvertical_onout_action();"
	onover="controlBar_dpadvertical_onover_action();"
	visible="false"
	>

  <layer name="controlBar_dpadbtn_autorotate_on"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_start_autorotation.png"
          onclick="resumeautorotation();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadautorotateOnTip"
          />
  <layer name="controlBar_dpadbtn_autorotate_off"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_stop_autorotation.png"
          onclick="pauseautorotation();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadautorotateOffTip"
          />


  <layer name="controlBar_dpadbtn_autotour_on"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_start_automatic_tour.png"
          onclick="startautotour();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadautotourOnTip"
          />
  <layer name="controlBar_dpadbtn_autotour_off"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_stop_automatic_tour.png"
          onclick="stopautotour();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadautotourOffTip"
          />

  <layer name="controlBar_dpadbtn_in"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_zoom_in.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          ondown="viewControlZoomIn(false);"
          onup="viewControlZoomStop();
"
          tooltip="controlBar_dpadzoomInTip"
          visible="false"
          devices="desktop"
          />

  <layer name="controlBar_dpadbtn_out"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_zoom_out.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          ondown="viewControlZoomOut(false);
"
          onup="viewControlZoomStop();
"
          tooltip="controlBar_dpadzoomOutTip"
          visible="false"
          devices="desktop"
          />
  <layer name="controlBar_dpadzoom_slider_bg"
          url="%FIRSTXML%/graphics/crosscornerbar/slider_bg_vertical.png"
          keep="true"
          align="bottom"
          alpha="0.2"
          visible="false"
          devices="desktop"
          >
    <layer name="controlBar_dpadzoom_slider_grip"
           keep="true"
           url="%FIRSTXML%/graphics/crosscornerbar/slider_grip_vertical.png"
           align="top"
           edge="center"
           ondown="controlBar_dpadzoom_slider_grip_ondown();"
           />
  </layer>

  <layer name="controlBar_dpadbtn_openfs"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_enter_fs.png"
          onclick="enterFullscreen();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          tooltip="controlBar_dpadopenFsTip"
          visible="false"
          devices="fullscreensupport"
          />
  <layer name="controlBar_dpadbtn_closefs"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_close_fs.png"
          onclick="exitFullscreen();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadcloseFsTip"
          devices="fullscreensupport"
          />


  <layer name="controlBar_dpadbtn_enter_vr"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_vr_mode.png"
          onclick="js(accessWebVr());
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          tooltip="controlBar_dpadenterVRTip"
          visible="false"
          devices="html5"
          />
    <layer name="controlBar_dpadbtn_enter_vr_not"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_vr_mode_off.png"
            style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
            tooltip="controlBar_dpadenterVRNotTip"
            enabled="true"
            capture="false"
            visible="false"
            devices="html5"
            />

  <layer name="controlBar_dpadbtn_gyroscope_off"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_gyroscope.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          onclick="disableGyroscope();
"
          devices="html5"
          visible="false"
            tooltip="controlBar_dpadgyroOffTip"
          />
  <layer name="controlBar_dpadbtn_gyroscope_on"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_gyroscope.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          onclick="enableGyroscope();
"
          devices="html5"
            tooltip="controlBar_dpadgyroOnTip"
          visible="false"
          />
  <layer name="controlBar_dpadbtn_gyroscope_not"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_gyroscope_off.png"
          style="controlBar_dpadbtn_vertical_style_off|controlBar_dpadbtn_vertical_style_alpha"
          enabled="true"
          capture="false"
          devices="html5"
            tooltip="controlBar_dpadgyroNotTip"
          visible="false"
          />

  <layer name="controlBar_dpadbtn_ctrlmode_move_to"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_move_to.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          tooltip="controlBar_dpadctrlmodeMoveTip"
          onclick="setControlModeMoveTo();
"
          visible="false"
          devices="desktop"
          />
  <layer name="controlBar_dpadbtn_ctrlmode_drag_to"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_drag_to.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          tooltip="controlBar_dpadctrlmodeDragTip"
          onclick="setControlModeDragTo();
"
          visible="false"
          devices="desktop"
          />


</layer>

  <action name="controlBar_dpadvertical_onout_action">
    set(layer[controlBar_dpadmenu_vertical_bg].alpha, 0.2);
    if (device.fullscreensupport,
      set(layer[controlBar_dpadbtn_openfs].alpha, 0.2);
      set(layer[controlBar_dpadbtn_closefs].alpha, 0.2);
    );
    if (device.desktop,
    set(layer[controlBar_dpadbtn_in].alpha, 0.2);
    set(layer[controlBar_dpadbtn_out].alpha, 0.2);
    set(layer[controlBar_dpadzoom_slider_bg].alpha, 0.2);
    );

    if(layer[controlBar_dpadbtn_enter_vr],
      set(layer[controlBar_dpadbtn_enter_vr].alpha, 0.2);
    );
    set(layer[controlBar_dpadbtn_autotour_off].alpha, 0.2);
    set(layer[controlBar_dpadbtn_autotour_on ].alpha, 0.2);

    set(layer[controlBar_dpadbtn_autorotate_off].alpha, 0.2);
    set(layer[controlBar_dpadbtn_autorotate_on ].alpha, 0.2);
    if (device.desktop,
      set(layer[controlBar_dpadbtn_ctrlmode_drag_to].alpha, 0.2);
      set(layer[controlBar_dpadbtn_ctrlmode_move_to].alpha, 0.2);
    );
  </action>

  <action name="controlBar_dpadvertical_onover_action">
    set(layer[controlBar_dpadmenu_vertical_bg].alpha, 1);
    if (device.fullscreensupport,
      set(layer[controlBar_dpadbtn_openfs].alpha, 1);
      set(layer[controlBar_dpadbtn_closefs].alpha, 1);
    );
    if (device.desktop,
    set(layer[controlBar_dpadbtn_in].alpha, 1);
    set(layer[controlBar_dpadbtn_out].alpha, 1);
    set(layer[controlBar_dpadzoom_slider_bg].alpha, 1);
    );

    if(layer[controlBar_dpadbtn_enter_vr],
      set(layer[controlBar_dpadbtn_enter_vr].alpha, 1);
    );
    set(layer[controlBar_dpadbtn_autotour_off].alpha, 1);
    set(layer[controlBar_dpadbtn_autotour_on ].alpha, 1);

    set(layer[controlBar_dpadbtn_autorotate_off].alpha, 1);
    set(layer[controlBar_dpadbtn_autorotate_on ].alpha, 1);
    if (device.desktop,
      set(layer[controlBar_dpadbtn_ctrlmode_drag_to].alpha, 1);
      set(layer[controlBar_dpadbtn_ctrlmode_move_to].alpha, 1);
    );
  </action>

  <action name="controlBar_dpadhorizontal_onout_action">
    set(layer[controlBar_dpadmenu_horizontal_bg].alpha, 0.2);

    set(layer[controlBar_dpadbtn_share].alpha, 0.2);

    set(layer[controlBar_dpadbtn_home].alpha, 0.2);
    if (scene.count GT 1,
    set(layer[controlBar_dpadbtn_prev_pano].alpha, 0.2);
    set(layer[controlBar_dpadbtn_next_pano].alpha, 0.2);
    );


    set(layer[controlBar_dpadbtn_show_thumbnails].alpha, 0.2);
    set(layer[controlBar_dpadbtn_hide_thumbnails].alpha, 0.2);

 
  </action>

  <action name="controlBar_dpadhorizontal_onover_action">
    set(layer[controlBar_dpadmenu_horizontal_bg].alpha, 1);

    set(layer[controlBar_dpadbtn_share].alpha, 1);

    set(layer[controlBar_dpadbtn_home].alpha, 1);
    if (scene.count GT 1,
    set(layer[controlBar_dpadbtn_prev_pano].alpha, 1);
    set(layer[controlBar_dpadbtn_next_pano].alpha, 1);
    );


    set(layer[controlBar_dpadbtn_show_thumbnails].alpha, 1);
    set(layer[controlBar_dpadbtn_hide_thumbnails].alpha, 1);


  </action>

  <style name="controlBar_dpadbtn_horizontal_style"
         keep="true"
         align="left"
         onhover="controlBar_dpadshowHorizontalMenuTooltip();"
         onout="hideTooltip();"
               crop="0| 0|30|30"
         onovercrop="0|30|30|30"
         ondowncrop="0|60|30|30"
         y="0"
         />
<style name="controlBar_dpadbtn_horizontal_style_alpha"
	alpha="1.0"
	devices="tablet.or.mobile"
	/>
<style name="controlBar_dpadbtn_horizontal_style_alpha"
	alpha="0.2"
	devices="desktop"
	/>

  <layer name="controlBar_dpadmenu_horizontal_bg"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_horizontal.png"
          keep="true"
          align="bottomright"
          x="118"
          y="124"
          edge="right"
          zorder="4"
          scale9grid="10|12|40|3"
          style="controlBar_dpadmenu_bg_alpha"
          visible="false"
          />

  <layer name="controlBar_dpadmenu_horizontal_bg_border"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_border_horizontal.png"
          keep="true"
          align="bottomright"
          x="118"
          y="124"
          edge="right"
          zorder="5"
          scale9grid="10|12|40|3"
          onout="controlBar_dpadhorizontal_onout_action();"
          onover="controlBar_dpadhorizontal_onover_action();"
          visible="false"
          >
    <layer name="controlBar_dpadbtn_share"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_share.png"
            onclick="shareTour();
"
            style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
            tooltip="controlBar_dpadshareTip"
            visible="false"
            />

    <layer name="controlBar_dpadbtn_home"
           url="%FIRSTXML%/graphics/crosscornerbar/btn_home.png"
           onclick="controlBar_dpadbtn_home_action();"
           style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
           tooltip="controlBar_dpadhomeTip"
           visible="false"
           />

    <layer name="controlBar_dpadbtn_prev_pano"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_previous_scene.png"
            onclick="loadPreviousScene();
"
            style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
            tooltip="controlBar_dpadprevSceneTip"
            visible="false"
            />
    <layer name="controlBar_dpadbtn_next_pano"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_next_scene.png"
            onclick="loadNextScene();
"
            style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
            tooltip="controlBar_dpadnextSceneTip"
            visible="false"
            />


  <layer name="controlBar_dpadbtn_hide_thumbnails"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_hide_thumbnails.png"
          style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
          onclick="hideTourThumbnails();
"
          tooltip="controlBar_dpadhideThumbnailsTip"
          visible="false"
          />
  <layer name="controlBar_dpadbtn_show_thumbnails"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_show_thumbnails.png"
          style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
          onclick="showTourThumbnails();
"
          tooltip="controlBar_dpadshowThumbnailsTip"
          visible="false"
          />





  </layer>


	
	<style name="controlBar_dpadbtn_navigation_style"
		keep="true"
		onhover="controlBar_dpadshowVerticalMenuTooltip();"
		onout="hideTooltip();"
		crop="0|0|30|30"
		onovercrop="0|30|30|30"
		ondowncrop="0|60|30|30"
	/>
	<style name="controlBar_dpadbtn_navigation_style_alpha"
		alpha="1.0"
		devices="tablet.or.mobile"
	/>
	<style name="controlBar_dpadbtn_navigation_style_alpha"
		alpha="0.2"
		devices="desktop"
	/>
	<style name="controlBar_dpadbtn_navigation_style_showctrl"
		keep="true"
		onout="hideTooltip();set(alpha, 0.5);"
		onover="set(alpha, 1);"
	/>
	
	<layer name="controlBar_dpadnavigation_bg"
		url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_move.png"
		align="bottomright"
		x="10"
		y="70"
		keep="true"
		capture="false"
		zorder="4"
		style="controlBar_dpadmenu_bg_alpha"
		visible="false"
		/>

  <layer name="controlBar_dpadnavigation_bg_border"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_border_move.png"
          keep="true"
          align="bottomright"
          x="10"
          y="70"
          capture="false"
          zorder="5"
          onout="controlBar_dpadnav_onout_action();"
          onover="controlBar_dpadnav_onover_action();"
          visible="false"
          >
    <layer name="controlBar_dpadbtn_left"
            ondown="viewControlMoveLeft(false);
"
            onup="viewControlMoveHoriStop();
"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_left.png"
            style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveLeftTip"
            x="5"
            y="0"
            edge="left"
            align="left"
            visible="false"
             />
    <layer name="controlBar_dpadbtn_right"
            ondown="viewControlMoveRight(false);
"
            onup="viewControlMoveHoriStop();
"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_right.png"
            style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveRightTip"
            x="5"
            y="0"
            edge="right"
            align="right"
            visible="false"
             />
    <layer name="controlBar_dpadbtn_up"
            ondown="viewControlMoveUp(false);
"
            onup="viewControlMoveVertStop();
"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_up.png"
            style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveUpTip"
            x="0"
            y="5"
            align="top"
            edge="top"
            visible="false"
             />
    <layer name="controlBar_dpadbtn_down"
            ondown="viewControlMoveDown(false);
"
            onup="viewControlMoveVertStop();
"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_down.png"
            style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveDownTip"
            x="0"
            y="5"
            edge="bottom"
            align="bottom"
            visible="false"
             />

	<layer name="controlBar_dpadbtn_hidecontrols"
		url="%FIRSTXML%/graphics/crosscornerbar/btn_hide_controls.png"
		style="controlBar_dpadbtn_navigation_style"
		onclick="controlBar_dpadhideMenuControls();hideTourControls();
"
		edge="center"
		align="center"
		tooltip="controlBar_dpadhideControlsTip"
		visible="false"
		alpha="1.0"
		/>
	<layer name="controlBar_dpadbtn_showcontrols"
		onclick="controlBar_dpadshowMenuControls();showTourControls();
"
		url="%FIRSTXML%/graphics/crosscornerbar/btn_show_controls.png"
		style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_showctrl"
		align="center"
		edge="center"
		visible="false"
		alpha="0.5"
		tooltip="controlBar_dpaddisplayControlsTip"
		/>
	
</layer>

    <action name="controlBar_dpadbtn_home_action">
      hideTooltip();lookto(get(panoview.h),get(panoview.v),get(panoview.fov),smooth(100,20,50));
      if(scene[get(xml.scene)].video,
        plugin[get(videointerface_video)].seek(0);
        ifnot(plugin[get(videointerface_video)].ispaused,
          plugin[get(videointerface_video)].play();
        );
      );
    </action>

  <action name="controlBar_dpadnav_onout_action">
    set(layer[controlBar_dpadnavigation_bg].alpha, 0.2);
    set(layer[controlBar_dpadbtn_left].alpha, 0.2);
    set(layer[controlBar_dpadbtn_right].alpha, 0.2);
    set(layer[controlBar_dpadbtn_up].alpha, 0.2);
    set(layer[controlBar_dpadbtn_down].alpha, 0.2);
  </action>

  <action name="controlBar_dpadnav_onover_action">
    set(layer[controlBar_dpadnavigation_bg].alpha, 1);
    set(layer[controlBar_dpadbtn_left].alpha, 1);
    set(layer[controlBar_dpadbtn_right].alpha, 1);
    set(layer[controlBar_dpadbtn_up].alpha, 1);
    set(layer[controlBar_dpadbtn_down].alpha, 1);
  </action>



	<events name="controlBar_dpadhideshowthumbnailsevent" hidetourthumbnails="controlBar_dpadupdateHideShowThumbnailsButtons();" showtourthumbnails="controlBar_dpadupdateHideShowThumbnailsButtons();" keep="true"/>
	<action name="controlBar_dpadHideHideShowThumbnailsButtons">
		set(layer[controlBar_dpadbtn_show_thumbnails].visible, false);
		set(layer[controlBar_dpadbtn_hide_thumbnails].visible, false);
	</action>
	<action name="controlBar_dpadShowHideShowThumbnailsButtons">
		if (tour_displaythumbnails,
			set(layer[controlBar_dpadbtn_hide_thumbnails].visible, true);
			set(layer[controlBar_dpadbtn_show_thumbnails].visible, false);
		,
			set(layer[controlBar_dpadbtn_show_thumbnails].visible, true);
			set(layer[controlBar_dpadbtn_hide_thumbnails].visible, false);
		);
	</action>
	<action name="controlBar_dpadupdateHideShowThumbnailsButtons">
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowHideShowThumbnailsButtons();
		,
			controlBar_dpadHideHideShowThumbnailsButtons();
		);
	</action>

	<events name="controlBar_dpadAutorotationEvents"
		onstartautorotation="controlBar_dpadupdateAutorotationButtons();"
		onresumeautorotation="controlBar_dpadupdateAutorotationButtons();"
		onstopautorotation="controlBar_dpadupdateAutorotationButtons();"
		onpauseautorotation="controlBar_dpadupdateAutorotationButtons();"
		keep="true"/>
	<action name="controlBar_dpadHideAutorotationButtons">
		set(layer[controlBar_dpadbtn_autorotate_off].visible, false);
		set(layer[controlBar_dpadbtn_autorotate_on].visible , false);
	</action>
	<action name="controlBar_dpadShowAutorotationButtons">
		if(autorotate.enabled == false,
			set(layer[controlBar_dpadbtn_autorotate_off].visible, false);
			set(layer[controlBar_dpadbtn_autorotate_on].visible , true);
		,
			set(layer[controlBar_dpadbtn_autorotate_off].visible, true);
			set(layer[controlBar_dpadbtn_autorotate_on].visible , false);
		);
	</action>
	<action name="controlBar_dpadupdateAutorotationButtons">
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowAutorotationButtons();
		,
			controlBar_dpadHideAutorotationButtons();
		);
	</action>


	<events name="controlBar_dpadAutotourEvents"
		onstartautotour="controlBar_dpadupdateAutotourButtons();"
		onstopautotour="controlBar_dpadupdateAutotourButtons();"
		keep="true"/>
	<action name="controlBar_dpadHideAutotourButtons">
		set(layer[controlBar_dpadbtn_autotour_off].visible, false);
		set(layer[controlBar_dpadbtn_autotour_on].visible , false);
	</action>
	<action name="controlBar_dpadShowAutotourButtons">
		if (tour_autotourenabled == false,
			set(layer[controlBar_dpadbtn_autotour_off].visible, false);
			set(layer[controlBar_dpadbtn_autotour_on].visible , true);
		,
			set(layer[controlBar_dpadbtn_autotour_off].visible, true);
			set(layer[controlBar_dpadbtn_autotour_on].visible , false);
		);
	</action>
	<action name="controlBar_dpadupdateAutotourButtons">
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowAutotourButtons();
		,
			controlBar_dpadHideAutotourButtons();
		);
	</action>
	

	<events name="controlBar_dpadcontrolmodechangedevent" oncontrolmodechanged="if (controlBar_dpadControlModeButtonsActivated,controlBar_dpadupdateControlModeButtons(););" onxmlcomplete="set(controlBar_dpadControlModeButtonsActivated, true);" keep="true"/>
	<action name="controlBar_dpadHideControlModeButtons">
		set(layer[controlBar_dpadbtn_ctrlmode_move_to].visible, false);
		set(layer[controlBar_dpadbtn_ctrlmode_drag_to].visible, false);
	</action>
	<action name="controlBar_dpadShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[controlBar_dpadbtn_ctrlmode_drag_to].visible, true);
			set(layer[controlBar_dpadbtn_ctrlmode_move_to].visible, false);
		,
			set(layer[controlBar_dpadbtn_ctrlmode_move_to].visible, true);
			set(layer[controlBar_dpadbtn_ctrlmode_drag_to].visible, false);
		);
	</action>
	<action name="controlBar_dpadupdateControlModeButtons">
	if (device.desktop,
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowControlModeButtons();
		,
			controlBar_dpadHideControlModeButtons();
		);
	,
		controlBar_dpadHideControlModeButtons();
	);
	</action>
	
  <action name="controlBar_dpadzoom_slider_grip_dragging">
    if (pressed,
      sub(dy, mouse.stagey, drag_stagey); 
      add(newy, drag_currenty, dy); 

      if(newy LT 0, set(newy, 0) );
      if(newy GT layer[controlBar_dpadzoom_slider_bg].pixelheight, copy(newy, layer[controlBar_dpadzoom_slider_bg].pixelheight));
      copy(y, newy);

      div(val, newy, layer[controlBar_dpadzoom_slider_bg].pixelheight);

      sub(fovrange, view.fovmax, view.fovmin);
      mul(newfov  , val, fovrange);
      add(newfov  , view.fovmin);
      set(view.fov, get(newfov));

      delayedcall(0, controlBar_dpadzoom_slider_grip_dragging());
    );
  </action>
  <action name="controlBar_dpadzoom_slider_grip_ondown">
    copy(drag_currenty, y);
    copy(drag_stagey, mouse.stagey);
    controlBar_dpadzoom_slider_grip_dragging();
  </action>
  <events name="controlBar_dpadzoom_slider_events" keep="true" onviewchanged="controlBar_dpadzoom_slider_update();" />
  <action name="controlBar_dpadzoom_slider_update">
    if (device.desktop,
    ifnot (layer[controlBar_dpadzoom_slider_grip].pressed,
      sub(val, view.fov, view.fovmin);
      sub(fovrange, view.fovmax, view.fovmin);
      div(val, fovrange);
      mul(newy, val, layer[controlBar_dpadzoom_slider_bg].pixelheight);
      set(layer[controlBar_dpadzoom_slider_grip].y, get(newy));
    );
    );
  </action>

	<events name="controlBar_dpadmenufullscreenchangeevent"
		onenterfullscreen="controlBar_dpadupdateFullscreenButtons();"
		onexitfullscreen="controlBar_dpadupdateFullscreenButtons();"
		keep="true"/>
	<action name="controlBar_dpadHideFullscreenButtons">
		set(layer[controlBar_dpadbtn_openfs].visible , false);
		set(layer[controlBar_dpadbtn_closefs].visible, false);
	</action>
	<action name="controlBar_dpadShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[controlBar_dpadbtn_openfs].visible , false);
				set(layer[controlBar_dpadbtn_closefs].visible, true);
			,
				set(layer[controlBar_dpadbtn_openfs].visible ,true);
				set(layer[controlBar_dpadbtn_closefs].visible,false);
			);
		,
			controlBar_dpadHideFullscreenButtons();
		);
	</action>
	<action name="controlBar_dpadupdateFullscreenButtons">
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowFullscreenButtons();
		,
			controlBar_dpadHideFullscreenButtons();
		);
	</action>
	

<events name="controlBar_dpadvravailableevent"
		onvravailable="controlBar_dpadupdateVrButtonsAvailability();"
		onvrunavailable="controlBar_dpadupdateVrButtonsAvailability();"
		keep="true" devices="html5" />
	<krpano controlBar_dpadmenuvravailable="false" />
	<action name="controlBar_dpadupdateVrButtonsAvailability">
		if (tour_vrdevices,
			set(controlBar_dpadmenuvravailable, true);
		,
			set(controlBar_dpadmenuvravailable, false);
		);
		controlBar_dpadupdateVrButtons();
	</action>
	<action name="controlBar_dpadHideVrButtons">
		set(layer[controlBar_dpadbtn_enter_vr].visible, false);
		if('%1' == 'true' AND plugin[ptpvrmode],
			set(layer[controlBar_dpadbtn_enter_vr_not].visible, true);
		,
			set(layer[controlBar_dpadbtn_enter_vr_not].visible, false);
		);
	</action>
	<action name="controlBar_dpadShowVrButtons">
		if (controlBar_dpadmenuvravailable,
			set(layer[controlBar_dpadbtn_enter_vr].visible, true);
			set(layer[controlBar_dpadbtn_enter_vr_not].visible, false);
		,
			controlBar_dpadHideVrButtons(true);
		);
	</action>
	<action name="controlBar_dpadupdateVrButtons">
	if (tour_vrdevices,
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowVrButtons();
		,
			controlBar_dpadHideVrButtons();
		);
	,
		if (controlBar_dpadIsOpened,
			controlBar_dpadHideVrButtons(true);
		,
			controlBar_dpadHideVrButtons();
		);
	);
	</action>

  <events name="controlBar_dpadbtngyroscopeavailableevents"
          ongyroscopeavailable="controlBar_dpadupdateGyroscopeButtonsAvailability();"
          ongyroscopeunavailable="controlBar_dpadupdateGyroscopeButtonsAvailability();"
          ongyroscopeon="controlBar_dpadenableGyroscopeButtons(true);"
          ongyroscopeoff="controlBar_dpadenableGyroscopeButtons(false);"
          keep="true" devices="html5" />
  <krpano controlBar_dpadmenugyroscopeavailable="false"
          controlBar_dpadmenugyroscopeenabled="false"/>
  <action name="controlBar_dpadupdateGyroscopeButtonsAvailability">
    if (tour_gyroscopedevices,
      set(controlBar_dpadmenugyroscopeavailable, true);
      controlBar_dpadupdateGyroscopeButtons();
    ,
      set(controlBar_dpadmenugyroscopeavailable, false);
      controlBar_dpadupdateGyroscopeButtons();
    );
  </action>
  <action name="controlBar_dpadenableGyroscopeButtons">
    if (tour_gyroscopedevices,
      set(controlBar_dpadmenugyroscopeenabled, %1);
      controlBar_dpadupdateGyroscopeButtons();
    );
  </action>
	<action name="controlBar_dpadHideGyroscopeButtons">
		set(layer[controlBar_dpadbtn_gyroscope_off].visible, false);
		set(layer[controlBar_dpadbtn_gyroscope_on].visible, false);
		if('%1' == 'true' AND plugin[gyroscope],
			set(layer[controlBar_dpadbtn_gyroscope_not].visible, true);
		,
			set(layer[controlBar_dpadbtn_gyroscope_not].visible, false);
		);
	</action>
	<action name="controlBar_dpadShowGyroscopeButtons">
		if (controlBar_dpadmenugyroscopeavailable,
			if (controlBar_dpadmenugyroscopeenabled,
				set(layer[controlBar_dpadbtn_gyroscope_off].visible, true);
				set(layer[controlBar_dpadbtn_gyroscope_on].visible, false);
			,
				set(layer[controlBar_dpadbtn_gyroscope_off].visible, false);
				set(layer[controlBar_dpadbtn_gyroscope_on].visible, true);
			);
			set(layer[controlBar_dpadbtn_gyroscope_not].visible, false);
		,
			controlBar_dpadHideGyroscopeButtons(true);
		);
	</action>
	<action name="controlBar_dpadupdateGyroscopeButtons">
	if (tour_gyroscopedevices,
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowGyroscopeButtons();
		,
			controlBar_dpadHideGyroscopeButtons();
		);
	,
		if (controlBar_dpadIsOpened,
			controlBar_dpadHideGyroscopeButtons(true);
		,
			controlBar_dpadHideGyroscopeButtons();
		);
	);
	</action>
	


<action name="controlBar_dpadhideMenuControls">
		set(controlBar_dpadIsOpened, false);
		set(layer[controlBar_dpadnavigation_bg].visible, false);
		
			set(layer[controlBar_dpadbtn_up].visible, false);
			set(layer[controlBar_dpadbtn_down].visible, false);
			set(layer[controlBar_dpadbtn_left].visible, false);
			set(layer[controlBar_dpadbtn_right].visible, false);
		
		set(layer[controlBar_dpadnavigation_bg_border].visible, true);
		tween(layer[controlBar_dpadnavigation_bg_border].alpha, 0.5, 1);
		
		
		if(controlBar_dpadverticalheight GT 0,
			set(layer[controlBar_dpadmenu_vertical_bg].visible, false);
				set(layer[controlBar_dpadbtn_in].visible, false);
				set(layer[controlBar_dpadbtn_out].visible, false);
					set(layer[controlBar_dpadzoom_slider_bg].visible, false);

				controlBar_dpadupdateGyroscopeButtons();

				controlBar_dpadupdateAutorotationButtons();

				controlBar_dpadupdateAutotourButtons();
				controlBar_dpadupdateVrButtons();

				controlBar_dpadupdateFullscreenButtons();
				controlBar_dpadupdateControlModeButtons();
			tween(layer[controlBar_dpadmenu_vertical_bg_border].alpha , 0, 1);
			tween(layer[controlBar_dpadmenu_vertical_bg_border].height , 0, 1, easeOutQuad, set(layer[controlBar_dpadmenu_vertical_bg_border].visible, false));
		);
		
		
		if(controlBar_dpadhorizontalwidth != 0,
			set(layer[controlBar_dpadmenu_horizontal_bg].visible, false);

				set(layer[controlBar_dpadbtn_share].visible, false);

				set(layer[controlBar_dpadbtn_home].visible, false);
				if (scene.count GT 1,
					set(layer[controlBar_dpadbtn_prev_pano].visible, false);
					set(layer[controlBar_dpadbtn_next_pano].visible, false);
				);


				controlBar_dpadupdateHideShowThumbnailsButtons();


			tween(layer[controlBar_dpadmenu_horizontal_bg_border].alpha , 0, 1);
			tween(layer[controlBar_dpadmenu_horizontal_bg_border].width, 0, 1, easeOutQuad, set(layer[controlBar_dpadmenu_horizontal_bg_border].visible, false));
		);
		set(layer[controlBar_dpadbtn_showcontrols].visible, true);
		set(layer[controlBar_dpadbtn_hidecontrols].visible, false);
	</action>
	
	<action name="controlBar_dpadshowMenuControls">
	set(controlBar_dpadIsOpened, true);
    set(layer[controlBar_dpadbtn_showcontrols].visible, false);
    set(layer[controlBar_dpadbtn_hidecontrols].visible, true);
    set(layer[controlBar_dpadnavigation_bg].visible, true);

    set(layer[controlBar_dpadbtn_up].visible, true);
    set(layer[controlBar_dpadbtn_down].visible, true);
    set(layer[controlBar_dpadbtn_left].visible, true);
    set(layer[controlBar_dpadbtn_right].visible, true);

    set(layer[controlBar_dpadnavigation_bg_border].visible, true);
    tween(layer[controlBar_dpadnavigation_bg_border].alpha, 1, 1);

    
    if(controlBar_dpadverticalheight GT 0,
      set(layer[controlBar_dpadmenu_vertical_bg_border].visible, true);
      tween(layer[controlBar_dpadmenu_vertical_bg_border].alpha, 1, 1);
      tween(layer[controlBar_dpadmenu_vertical_bg_border].height, get(controlBar_dpadverticalheight), 1, easeOutQuad,
        set(layer[controlBar_dpadmenu_vertical_bg].visible, true);
        controlBar_dpadupdateFullscreenButtons();
        controlBar_dpadupdateAutorotationButtons();

        controlBar_dpadupdateAutotourButtons();
        controlBar_dpadupdateVrButtons();

        if (device.desktop,
        set(layer[controlBar_dpadbtn_in].visible, true);
        set(layer[controlBar_dpadbtn_out].visible, true);
        set(layer[controlBar_dpadzoom_slider_bg].visible, true);
        );

        controlBar_dpadupdateGyroscopeButtons();

      );
    );

    
    if(controlBar_dpadhorizontalwidth != 0,
      set(layer[controlBar_dpadmenu_horizontal_bg_border].visible, true);
      tween(layer[controlBar_dpadmenu_horizontal_bg_border].alpha, 1, 1);
      tween(layer[controlBar_dpadmenu_horizontal_bg_border].width, get(controlBar_dpadhorizontalwidth), 1, easeOutQuad,
        set(layer[controlBar_dpadmenu_horizontal_bg].visible, true);

      set(layer[controlBar_dpadbtn_share].visible, true);

      set(layer[controlBar_dpadbtn_home].visible, true);
        if (scene.count GT 1,
          set(layer[controlBar_dpadbtn_prev_pano].visible, true);
          set(layer[controlBar_dpadbtn_next_pano].visible, true);
        );
        controlBar_dpadupdateControlModeButtons();


        controlBar_dpadupdateHideShowThumbnailsButtons();




      );
    );
  </action>



  <action name="controlBar_dpadshowHorizontalMenuTooltip">
    if (tooltip !== null, showTooltip('plugin', controlBar_dpadhorizMenuTooltipStyle, bottom););
  </action>
  <action name="controlBar_dpadshowVerticalMenuTooltip">
    if (tooltip !== null, showTooltip('plugin', controlBar_dpadverticalMenuTooltipStyle, right););
  </action>

  <layer name="controlBar_dpadhorizMenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="true"
	backgroundcolor="0xffffff"
	backgroundalpha="1"
	border="true"
	borderwidth="2.0"
	bordercolor="0x000000"
	borderalpha="0.30000762951094834"
	css="color:#000000;font-family:Segoe UI Black;font-weight:bold;font-size:14px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	selectable="false"
	zorder="0"
	padding="2"
	xoffset="0"
	visible="false"
	html=""
	edge="bottom"
	yoffset="-10"
  />
  <layer name="controlBar_dpadverticalMenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="true"
	backgroundcolor="0xffffff"
	backgroundalpha="1"
	border="true"
	borderwidth="2.0"
	bordercolor="0x000000"
	borderalpha="0.30000762951094834"
	css="color:#000000;font-family:Segoe UI Black;font-weight:bold;font-size:14px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	selectable="false"
	zorder="0"
	padding="2"
	yoffset="0"
	visible="false"
	html=""
	edge="right"
	xoffset="-10"
  />






<!-- ********** -->
<!-- Panorama Title -->
<!-- id : title -->
<!-- ********** -->

  <events name="title_events" 
    onTourStart="showtitle();"
    changetourlanguage="changeLanguagetitle"
    keep="true" />

  <action name="showtitle">set(layer[title].visible, true );</action>

  <action name="changeLanguagetitle">
    getmessage(layer[title].html,get(projecttitleid));
    escape(layer[title].html);
  </action>

  <layer name="title" keep="true" zorder="6"
         url="%FIRSTXML%/graphics/textfield.swf"
         align="top" x="10" y="60" width="100%" autoheight="true"
         onloaded="getmessage(html,get(projecttitleid));escape(html);"
         background="false" capture="false" handcursor="false" selectable="false" enabled="false"
         borderwidth="0"
         alpha="0.7000076295109483"
         visible="false"
         textshadow="1"
         css="text-align:center;
              color:#ffffff;
              font-family:Segoe UI Black;
              font-weight:bold;
              font-size:28px;"/>

<!-- ********** -->
<!-- Barra de galerÃ­a pequeÃ±a -->
<!-- id : smallgallerybar -->
<!-- Based on krpano imagegallery sample, a krpano xml controlled thumbnails image bar -->
<!-- ********** -->

  <krpano smallgallerybarbuilt="false" smallgallerybarBuildable="false" />
  <events name="smallgallerybarevents"
          onxmlcomplete="smallgallerybarbuildBar();"
          hidetourcontrols="hidesmallgallerybar();"
          showtourcontrols="showsmallgallerybar();"
          keep="true"/>
  <action name="smallgallerybarbuildBar">
    ifnot (smallgallerybarbuilt,
      set(smallgallerybarbuilt, true);
      
    );
  </action>

  <events name="smallgallerybarStartEvents" onTourStart="showsmallgallerybar();" keep="true" />



  <layer name="smallgallerybarbackground" type="container" keep="true"
         bgcolor="0xffffff"
         bgalpha="0.20000000000000001"
         alpha="1.0"
         align="left"
         x="10"
         y="0"
         zorder="7"
         visible="false"
         height="72"
         width="102"
         />

  <action name="hidesmallgallerybar">
	smallgallerybarthumbbar_set_visible(false);
  </action>
  <action name="showsmallgallerybar">
    if(smallgallerybarBuildable,
    if(tour_displaycontrols,smallgallerybarthumbbar_set_visible(true);,hidesmallgallerybar(););
    );
  </action>


  <action name="smallgallerybarthumbbar_addimage">
    txtadd(pname, 'smallgallerybarPicture', %1);
    addplugin(get(pname));
    set(layer[%pname].zorder, 8);
    set(layer[%pname].url, %2);
    set(layer[%pname].align, left);
    set(layer[%pname].width, 90);
    set(layer[%pname].height, 60);
    set(layer[%pname].onclick, smallgallerybar_showimage(get(name)));
    set(layer[%pname].visible, false);
    set(layer[%pname].keep, true);

    
    set(layer[%pname].x, 16);

    mul(tmp, 66, %1);
    add(tmp, tmp, 3);
    add(layer[%pname].y, 0, tmp );

      sub(layer[%pname].y, layer[%pname].y, 3);

    copy(layer[%pname].thumbx, layer[%pname].x);
    copy(layer[%pname].thumby, layer[%pname].y);
  </action>

  <action name="smallgallerybar_showimage">
    smallgallerybar_hide_allimages();

    set(layer[%1].zorder, 9);

    push(layer[%1].width);
    push(layer[%1].height);
    layer[%1].resetsize();
    copy(layer[%1].originalwidth , layer[%1].width);
    copy(layer[%1].originalheight, layer[%1].height);
    pop(layer[%1].height);
    pop(layer[%1].width);

    set(imgwidth , get(layer[%1].originalwidth));
    set(imgheight, get(layer[%1].originalheight));

    set(maxwidth, get(stagewidth));
    sub(maxwidth, get(stagewidth), 236);

    set(maxheight, get(stageheight));
    sub(maxheight, get(stageheight), 12);

    if(imgwidth GT maxwidth,
      mul(imgheight, imgheight, maxwidth);
      div(imgheight, imgheight, imgwidth);
      copy(imgwidth, maxwidth);
    );

    if(imgheight GT maxheight,
      mul(imgwidth, imgwidth, maxheight);
      div(imgwidth, imgwidth, imgheight);
      copy(imgheight, maxheight);
    );

    tween(layer[%1].width , get(imgwidth));
    tween(layer[%1].height, get(imgheight));

    layer[%1].changeorigin(center,center);

    tween(layer[%1].x, 0);
    tween(layer[%1].y, 0);

    set(layer[%1].onclick, smallgallerybar_hideimage(%1) );
  </action>

  <action name="smallgallerybar_hideimage">
    layer[%1].changeorigin(left,left);

    set(layer[%1].zorder, 8);

    tween(layer[%1].width , 90);
    tween(layer[%1].height, 60);
    tween(layer[%1].x, get(layer[%1].thumbx));
    tween(layer[%1].y, get(layer[%1].thumby));

    set(layer[%1].onclick, smallgallerybar_showimage(%1) );
  </action>

  <action name="smallgallerybar_hide_allimages">
    smallgallerybar_hideimage(smallgallerybarPicture0);
  </action>

  <action name="smallgallerybarthumbbar_set_visible">
    set(layer[smallgallerybarPicture0].visible,%1);
    set(layer[smallgallerybarbackground].visible, %1);
  </action>

<!-- ********** -->
<!-- Compartir en redes sociales -->
<!-- id : socialShare -->
<!-- ********** -->

<ptplugin name="socialShare" engine="kolorBox">
	<settings>
		<option name="position" value="left" type="string" />
		<option name="margin_x" value="50" type="int" />
		<option name="margin_y" value="50" type="int" />
		<option name="external_padding" value="15" type="int" />
		<option name="animate" value="false" type="bool" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.80000000000000004" type="float" />
		<option name="container_topleft_border_radius" value="10" type="int" />
		<option name="container_topright_border_radius" value="10" type="int" />
		<option name="container_bottomleft_border_radius" value="10" type="int" />
		<option name="container_bottomright_border_radius" value="10" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="container_border_alpha" value="1" type="float" />
		<option name="overlay_displayed" value="false" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.50000762951094835" type="float" />

		<option name="social_btn" value="facebook#twitter#google#linkedin#email" type="string" />
		<option name="social_orientation" value="horizontal" type="string" />
		<option name="social_btn_size" value="50" type="int" />
		<option name="inner_margin" value="10" type="int" />
		
		
		<option name="title_displayed" value="false" type="bool" />
		<option name="caption_displayed" value="false" type="bool" />
		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_text" value="socialShareclose_text" type="string" />

		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback_socialShare')" type="string" />
		<option name="zorder" value="10" type="int" />
		<option name="use_i18n" value="true" type="bool" />
	</settings>
	<internaldata>
		
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady_socialShare">
	set(ptplugin[socialShare].jsready, true);

</action>



<action name="showSocialShare_socialShare">
	ifnot(ptplugin[socialShare].isOpen,
		set(ptplugin[socialShare].isOpen, true);
		pauseautorotation(forceplugin);

			js(invokePluginFunction(socialShare, loadSingleArrayItem, social));
		events.dispatch(onremovedisplayedobject);
	);
</action>

<action name="toggleSocialShare_socialShare">
	js(invokePluginFunction(socialShare, toggleKolorBox, %1));
</action>


<action name="closeKolorBox_socialShare">
	js(invokePluginFunction(socialShare, closeKolorBox));
</action>

<action name="closeKolorBoxCallback_socialShare">
	resumeautorotation(forceplugin);

	
	set(ptplugin[socialShare].isOpen, false);
</action>

<action name="changeLanguage_socialShare">
	if(ptplugin[socialShare].jsready,
		js(invokePluginFunction(socialShare, changeLanguage));
	);
</action>

<events name="kolorBoxEvents_socialShare" 
	keep="true"
	onsharetour="showSocialShare_socialShare();" 
	
	
	changetourlanguage="changeLanguage_socialShare();"
	/>

<!-- ********** -->
<!-- BotÃ³n WebVR -->
<!-- id : webvrbutton -->
<!-- ********** -->

	<layer name="webvrbutton"
		keep="true"
		blocked="false"
		alpha="1"
		url="%FIRSTXML%/graphics/webvrbutton/btn_webvr.png" 
		align="topright"
		x="10"
		y="10"
		zorder="11"
		visible="false"
		onclick="js(accessWebVr());
"

		crop="0|0|100|63"
		/>

	<events name="webvrbuttonevents"
		onvrunavailable="hidewebvrbutton(true);"
		onTourStart="showwebvrbutton();"
		hidetourcontrols="hidewebvrbutton();" 
		showtourcontrols="showwebvrbutton();" 
		keep="true" />
	<action name="hidewebvrbutton">if(%1 == true,set(layer[webvrbutton].blocked, true););set(layer[webvrbutton].visible, false);</action>
	<action name="showwebvrbutton">if(tour_displaycontrols,if(layer[webvrbutton].blocked == false,set(layer[webvrbutton].visible, true););,hidewebvrbutton(););</action>


<!-- ********** -->
<!-- Barra de miniaturas ClÃ¡sica -->
<!-- id : thumbnailsBar-theme02 -->
<!-- ********** -->






<layer name="thumbnailsBar_thumbnailsBar_theme02" 
	keep="true" 
	type="image" 
	visible="false"
	align="bottom" 
	
		width="100%" 
		height="0" 
		accuracy="1"
	
	x="0"
	y="10"
	
	url="%FIRSTXML%/graphics/classicthumbnailsbar/frame_bg.png" 
	scale9grid="10|10|80|80"
	
	zorder="12"
/>



<layer name="thumbnailBorderSource_thumbnailsBar_theme02"
	keep="true"
	visible="false"
	onloaded="loadedImages_thumbnailsBar_theme02(border);"
	url="%FIRSTXML%/graphics/classicthumbnailsbar/thumbnails_states.png" 
	offsetX="10"
	offsetY="10"
	quarterHeight="0"
/>



<layer name="tooltipStyle_thumbnailsBar_theme02"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="false"
	border="false"
	textshadow="1" textshadowrange="4.0" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1"
	css="color:#e6e6e6;font-family:Segoe UI Black;font-weight:bold;font-size:14px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	selectable="false"
	zorder="0"
	padding="2"
	xoffset="0"
	yoffset="0"
	visible="false"
	html=""
	edge="bottom"
/>
	
	<krpano arrow1Loaded_thumbnailsBar_theme02="false" arrow2Loaded_thumbnailsBar_theme02="false" borderLoaded_thumbnailsBar_theme02="false" thumbnailsLoadedCounter_thumbnailsBar_theme02="0" thumbsCount_thumbnailsBar_theme02="0" thumbsCounter_thumbnailsBar_theme02="0" firstInit_thumbnailsBar_theme02="false" />
	
	
	<events name="thumbnailsScrollEvents_thumbnailsBar_theme02" 
		keep="true" 
		
		onxmlcomplete="ifnot(startResize_thumbnailsBar_theme02,set(isLoaded_thumbnailsBar_theme02, true);if(isStarted_thumbnailsBar_theme02,onLoadCompleteHandler_thumbnailsBar_theme02();););"
		onTourStart="set(isStarted_thumbnailsBar_theme02, true);if(isLoaded_thumbnailsBar_theme02,onLoadCompleteHandler_thumbnailsBar_theme02(););"
		onnewpano="if(startResize_thumbnailsBar_theme02,if(firstInit_thumbnailsBar_theme02,onLoadCompleteHandler_thumbnailsBar_theme02();););"
		onresize="onResizeHandler_thumbnailsBar_theme02();"
		hidetourthumbnails="hideWithThumbnailsButton_thumbnailsBar_theme02();" 
		showtourthumbnails="showWithThumbnailsButton_thumbnailsBar_theme02();" 
		hidetourcontrols="hideWithControlsBar_thumbnailsBar_theme02();" 
		showtourcontrols="showWithControlsBar_thumbnailsBar_theme02();" 
		onenterfullscreen="delayedcall(0.2,scrollToCurrentThumb_thumbnailsBar_theme02(););"
		onexitfullscreen="delayedcall(0.2,scrollToCurrentThumb_thumbnailsBar_theme02(););"
	/>
	
	
	<layer name="scrollAreaContainer_thumbnailsBar_theme02" 
		keep="true"
		type="container" 
		align="topleft"
		x="5"
		y="5"
		
		marginX="5"
		marginY="5"
		
		width="0" 
		height="0"
		
		targetWidth="0"
		targetHeight="0"
		
		scrollSpeedInit="10"
		scrollSpeed="10"
		scrollSpeedMax="70"
		scrollSpeedAcceleration="20"
		
		parent="thumbnailsBar_thumbnailsBar_theme02"
		
		thumbWidth="0"
		thumbHeight="0"
		
		itemWidth="100"
		itemHeight="50"
		
		offsetX="0"
		offsetY="0"
		
		thumbSpacer="0"
		currentThumbsCount="0"
		
		adjustToContent="true"
		
		zorder="1"
		visible="false"
		ready="false"
	>
	
		
		<layer name="thumbsScrollArea_thumbnailsBar_theme02" 
			url="%FIRSTXML%/graphics/scrollarea.swf" 
			alturl="%FIRSTXML%/graphics/scrollarea.js" 
			align="bottom"
			onhover_autoscrolling="false"
			
			x="0"
			y="0"
			 
				direction="h" 
		/>
	
	</layer>
	
	
	
	<layer name="scrollPrevArrow_thumbnailsBar_theme02" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar_thumbnailsBar_theme02"
		targetHeight="0"
		targetWidth="0"
		zorder="2"
		onloaded="loadedImages_thumbnailsBar_theme02(arrow1);"
			url="%FIRSTXML%/graphics/classicthumbnailsbar/btn_scroll_left.png"
			align="left"
	/>
	
	
	
	<layer name="scrollNextArrow_thumbnailsBar_theme02" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar_thumbnailsBar_theme02"
		targetHeight="0"
		targetWidth="0"
		zorder="2"
		onloaded="loadedImages_thumbnailsBar_theme02(arrow2);"
			url="%FIRSTXML%/graphics/classicthumbnailsbar/btn_scroll_right.png"
			align="right"
	/>
	
	<action name="loadedImages_thumbnailsBar_theme02">
		if(%1 == "arrow1",
			set(arrow1Loaded_thumbnailsBar_theme02, true);
		);
		if(%1 == "arrow2",
			set(arrow2Loaded_thumbnailsBar_theme02, true);
		);
		if(%1 == "border",
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				set(borderLoaded_thumbnailsBar_theme02, true);
			);
		);
		if(%1 == "thumbnail",
			inc(thumbnailsLoadedCounter_thumbnailsBar_theme02);
		);
	</action>
	
	<action name="onLoadCompleteHandler_thumbnailsBar_theme02">
		
		set(thumbsCount_thumbnailsBar_theme02, 0);
		
		
		set(thumbsCount_thumbnailsBar_theme02, get(scene.count));
		
		
		
		
		
		
		
		loadThumbs_thumbnailsBar_theme02();
		
		if(firstInit_thumbnailsBar_theme02,
			onLoadCompleteHandlerPartThree_thumbnailsBar_theme02();
		,
			onLoadCompleteHandlerPartTwo_thumbnailsBar_theme02();
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartTwo_thumbnailsBar_theme02">
		set(imgCounter_thumbnailsBar_theme02, 3);
		
		if(arrow1Loaded_thumbnailsBar_theme02,
			dec(imgCounter_thumbnailsBar_theme02);
		);
		if(arrow2Loaded_thumbnailsBar_theme02,
			dec(imgCounter_thumbnailsBar_theme02);
		);
		if(thumbsCount_thumbnailsBar_theme02 == thumbnailsLoadedCounter_thumbnailsBar_theme02,
			dec(imgCounter_thumbnailsBar_theme02);
		);
		
		if(imgCounter_thumbnailsBar_theme02 LE 0,
			stopdelayedcall(delayedCallOnLoadComplete_thumbnailsBar_theme02);
			onLoadCompleteHandlerPartThree_thumbnailsBar_theme02();
		,
			delayedcall(delayedCallOnLoadComplete_thumbnailsBar_theme02, 0.2, onLoadCompleteHandlerPartTwo_thumbnailsBar_theme02());
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartThree_thumbnailsBar_theme02">
		resetMouseBehavior_thumbnailsBar_theme02();
		highlightCurrentThumb_thumbnailsBar_theme02();
		
		
		if(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent,
			mul(adjustWidth_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginX), 2);
			add(adjustWidth_thumbnailsBar_theme02, get(layer[thumbsScrollArea_thumbnailsBar_theme02].width));
			mul(adjustHeight_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginY), 2);
			add(adjustHeight_thumbnailsBar_theme02, get(layer[thumbsScrollArea_thumbnailsBar_theme02].height));
			
			
			if(adjustWidth_thumbnailsBar_theme02 GT stagewidth,
				set(adjustWidth_thumbnailsBar_theme02, get(stagewidth));
				set(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent, false);
			,
				if(adjustHeight_thumbnailsBar_theme02 GT stageheight,
					set(adjustHeight_thumbnailsBar_theme02, get(stageheight));
					set(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent, false);
				);
			);
			
			setSize_thumbnailsBar_theme02(get(adjustWidth_thumbnailsBar_theme02), get(adjustHeight_thumbnailsBar_theme02));
		);
		
		setupArrows_thumbnailsBar_theme02(true);
		
		
		if (thumbsCounter_thumbnailsBar_theme02 LE 0,
			set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
		);
		
		
		set(startResize_thumbnailsBar_theme02, true);
		set(firstInit_thumbnailsBar_theme02, true);
	</action>
	
	
	<action name="onResizeHandler_thumbnailsBar_theme02">
		
		delayedcall(0.1, onResizeCallback_thumbnailsBar_theme02(false); );
	</action>
	
	
	<action name="onResizeCallback_thumbnailsBar_theme02">
		if(startResize_thumbnailsBar_theme02,
			setSize_thumbnailsBar_theme02(get(layer[scrollAreaContainer_thumbnailsBar_theme02].targetWidth), get(layer[scrollAreaContainer_thumbnailsBar_theme02].targetHeight));
			setupArrows_thumbnailsBar_theme02(%1);
			
			
			if (thumbsCounter_thumbnailsBar_theme02 LE 0,
				set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
			);
		);
	</action>
	
	
		<action name="showWithThumbnailsButton_thumbnailsBar_theme02">
			set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, true);
			onResizeCallback_thumbnailsBar_theme02(true);
		</action>
		
		<action name="hideWithThumbnailsButton_thumbnailsBar_theme02">
			set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
		</action>
	
	
		<action name="showWithControlsBar_thumbnailsBar_theme02">
			
				if (tour_displaythumbnails,
					set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, true);
					onResizeCallback_thumbnailsBar_theme02(true);
				,
					set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
				);
		</action>
		
		<action name="hideWithControlsBar_thumbnailsBar_theme02">
			set(layer[thumbnailsBar_thumbnailsBar_theme02].visible, false);
		</action>
	
	
	<action name="thumbnailBorderDrawInit_thumbnailsBar_theme02">
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderWidth));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetY, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderWidth));
		
		
		mul(totalOffsetX_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderWidth), 2);
		mul(totalOffsetY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderWidth), 2);
		
		
		if(startResize_thumbnailsBar_theme02,
			sub(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth, get(totalOffsetX_thumbnailsBar_theme02));
			sub(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight, get(totalOffsetY_thumbnailsBar_theme02));
		);
		
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbWidth, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbHeight, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
		
		add(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth, get(totalOffsetX_thumbnailsBar_theme02));
		add(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight, get(totalOffsetY_thumbnailsBar_theme02));
	</action>
		
	
	<action name="thumbnailBorderImageInit_thumbnailsBar_theme02">
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetX));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetY, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetY));
		
		
		mul(totalOffsetX_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetX), 2);
		mul(totalOffsetY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetY), 2);
		
		
		if(startResize_thumbnailsBar_theme02,
			sub(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth, get(totalOffsetX_thumbnailsBar_theme02));
			sub(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight, get(totalOffsetY_thumbnailsBar_theme02));
		);
		
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbWidth, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbHeight, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
		
		add(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth, get(totalOffsetX_thumbnailsBar_theme02));
		add(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight, get(totalOffsetY_thumbnailsBar_theme02));
		
		
		div(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].height), 4);
		
		
		set(cropX_thumbnailsBar_theme02, 0);
		set(cropY_thumbnailsBar_theme02, 0);
		set(cropW_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].width));
		set(cropH_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropDefault, get(cropX_thumbnailsBar_theme02), '|', get(cropY_thumbnailsBar_theme02), '|', get(cropW_thumbnailsBar_theme02), '|', get(cropH_thumbnailsBar_theme02));

		
		add(cropY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropHover, get(cropX_thumbnailsBar_theme02), '|', get(cropY_thumbnailsBar_theme02), '|', get(cropW_thumbnailsBar_theme02), '|', get(cropH_thumbnailsBar_theme02));
		
		
		add(cropY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropSelected, get(cropX_thumbnailsBar_theme02), '|', get(cropY_thumbnailsBar_theme02), '|', get(cropW_thumbnailsBar_theme02), '|', get(cropH_thumbnailsBar_theme02));
		
		
		add(cropY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropVisited, get(cropX_thumbnailsBar_theme02), '|', get(cropY_thumbnailsBar_theme02), '|', get(cropW_thumbnailsBar_theme02), '|', get(cropH_thumbnailsBar_theme02));
		
		
		set(scaleX_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetX));
		set(scaleY_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].offsetY));
		sub(scaleW_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].width), get(totalOffsetX_thumbnailsBar_theme02));
		sub(scaleH_thumbnailsBar_theme02, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].quarterHeight), get(totalOffsetY_thumbnailsBar_theme02));
		txtadd(layer[thumbnailBorderSource_thumbnailsBar_theme02].scale9grid, get(scaleX_thumbnailsBar_theme02), '|', get(scaleY_thumbnailsBar_theme02), '|', get(scaleW_thumbnailsBar_theme02), '|', get(scaleH_thumbnailsBar_theme02));
	</action>
	
	
	<action name="loadThumbs_thumbnailsBar_theme02">
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(imgCounter_thumbnailsBar_theme02, 1);
		,
			set(imgCounter_thumbnailsBar_theme02, 0);
		);
		
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			if(borderLoaded_thumbnailsBar_theme02,
				dec(imgCounter_thumbnailsBar_theme02);
			);
		);
		
		if(imgCounter_thumbnailsBar_theme02 LE 0,
			stopdelayedcall(delayedCallOnLoadCompleteBorder_thumbnailsBar_theme02);
			loadThumbsPartTwo_thumbnailsBar_theme02();
		,
			delayedcall(delayedCallOnLoadCompleteBorder_thumbnailsBar_theme02, 0.2, loadThumbs_thumbnailsBar_theme02());
		);
	</action>
	
	<action name="loadThumbsPartTwo_thumbnailsBar_theme02">
		ifnot(layer[scrollAreaContainer_thumbnailsBar_theme02].ready,
			
			
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				thumbnailBorderImageInit_thumbnailsBar_theme02();
			,
				thumbnailBorderDrawInit_thumbnailsBar_theme02();
			);
			
			
			set(thumbsCounter_thumbnailsBar_theme02, 0);
			
			
			set(i_thumbnailsBar_theme02_wait,30);
			
			
				for( set(i_thumbnailsBar_theme02, 0), i_thumbnailsBar_theme02 LT scene.count, inc(i_thumbnailsBar_theme02),
					if(i_thumbnailsBar_theme02_wait == i_thumbnailsBar_theme02,
						add(i_thumbnailsBar_theme02_wait,30);
						wait(0);
					);
					createThumb_thumbnailsBar_theme02(get(scene[get(i_thumbnailsBar_theme02)].name), get(scene[get(i_thumbnailsBar_theme02)].thumburl), get(i_thumbnailsBar_theme02), get(scene[get(i_thumbnailsBar_theme02)].titleid));
					inc(thumbsCounter_thumbnailsBar_theme02);
				);
			
			
			
			
			
			
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].currentThumbsCount, get(thumbsCounter_thumbnailsBar_theme02));
			
			
			setSize_thumbnailsBar_theme02(get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].width), get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].height));
			
			
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].visible, true);
			
			
				if (tour_displaycontrols,
					showWithControlsBar_thumbnailsBar_theme02();
				,
					hideWithControlsBar_thumbnailsBar_theme02();
				);
			
			
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].ready, true);
		);
	</action>
	
	
	<action name="setSize_thumbnailsBar_theme02">
		
		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].targetWidth, %1);
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].targetHeight, %2);
		
		
		set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].width, %1);
		set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].height, %2);
		layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].updatepos();
		
		
		mul(totalMarginX_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginX), 2);
		mul(totalMarginY_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginY), 2);
		
			add(totalPluginHeight_thumbnailsBar_theme02, get(totalMarginY_thumbnailsBar_theme02), get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
			
			
			
			if(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelheight LT totalPluginHeight_thumbnailsBar_theme02,
				set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].height, get(totalPluginHeight_thumbnailsBar_theme02));
			);
		
		layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].updatepos();
		
		
		sub(containerWidth_thumbnailsBar_theme02, get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelwidth), get(totalMarginX_thumbnailsBar_theme02));
		sub(containerHeight_thumbnailsBar_theme02, get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelheight), get(totalMarginY_thumbnailsBar_theme02));

		
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].width, get(containerWidth_thumbnailsBar_theme02));
		set(layer[scrollAreaContainer_thumbnailsBar_theme02].height, get(containerHeight_thumbnailsBar_theme02));
		
		set(scrollAreaSize_thumbnailsBar_theme02, 0);
		
		
		mul(totalThumbsSpacer_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].currentThumbsCount), get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbSpacer));
		sub(totalThumbsSpacer_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbSpacer));
		
		set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, true);
		

			mul(scrollAreaSize_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth), get(layer[scrollAreaContainer_thumbnailsBar_theme02].currentThumbsCount));
			add(scrollAreaSize_thumbnailsBar_theme02, get(totalThumbsSpacer_thumbnailsBar_theme02));
			
			set(layer[thumbsScrollArea_thumbnailsBar_theme02].width, get(scrollAreaSize_thumbnailsBar_theme02));
			set(layer[thumbsScrollArea_thumbnailsBar_theme02].height, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
			
			
			if(layer[scrollAreaContainer_thumbnailsBar_theme02].width LT layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth,
				set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, false);
			,
				verifyThumbnailsBarVisibility_thumbnailsBar_theme02();
			);
			
		
		
		if(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].width LT 0,
			set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, false);
		);
		
	</action>
	
	
	<action name="verifyThumbnailsBarVisibility_thumbnailsBar_theme02">
		if(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible,
			set(boolValue_thumbnailsBar_theme02, false);
			
			if (tour_displaythumbnails,
				if (tour_displaycontrols,
					set(boolValue_thumbnailsBar_theme02, true);
				);
			);
			
			set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, get(boolValue_thumbnailsBar_theme02));
		);
	</action>
	
	
	<action name="createThumb_thumbnailsBar_theme02">

			add(offsetFactor_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth), get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbSpacer));
	
			mul(thumbIncPos_thumbnailsBar_theme02, %3, get(offsetFactor_thumbnailsBar_theme02));
			
			
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				add(thumbIncPos_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX));
			);
			
		
		mul(negativeOffsetX_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX), -1);
		mul(negativeOffsetY_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetY), -1);
		
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar_theme02');
		addlayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');
		addlayer(get(thumbBorderName));
		
		
		ifnot(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(layer[get(thumbBorderName)].type, container);
			set(layer[get(thumbBorderName)].parent, thumbsScrollArea_thumbnailsBar_theme02);
		);
		
		
		set(layer[get(thumbName)].onloaded, loadedImages_thumbnailsBar_theme02("thumbnail"););
		set(layer[get(thumbName)].url, %2);
		set(layer[get(thumbName)].keep, true);
		set(layer[get(thumbName)].width, get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbWidth));
		set(layer[get(thumbName)].height, get(layer[scrollAreaContainer_thumbnailsBar_theme02].thumbHeight));
		set(layer[get(thumbName)].align, topleft);
		
		
			set(layer[get(thumbName)].y, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetY));
		
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				set(layer[get(thumbName)].parent, thumbsScrollArea_thumbnailsBar_theme02);
				set(layer[get(thumbName)].x, get(thumbIncPos_thumbnailsBar_theme02));
			,
				set(layer[get(thumbName)].parent, get(thumbBorderName));
				set(layer[get(thumbName)].x, get(layer[scrollAreaContainer_thumbnailsBar_theme02].offsetX));
				set(layer[get(thumbName)].onclick, resetMouseBehavior_thumbnailsBar_theme02(); mainloadscene(%1); highlightThumb_thumbnailsBar_theme02(%1));
			);	
			
		
		
		set(layer[get(thumbBorderName)].keep, true);
		set(layer[get(thumbBorderName)].width, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth));
		set(layer[get(thumbBorderName)].height, get(layer[scrollAreaContainer_thumbnailsBar_theme02].itemHeight));
		set(layer[get(thumbBorderName)].align, topleft);
		
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(layer[get(thumbBorderName)].url, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].url));
			set(layer[get(thumbBorderName)].scale9grid, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].scale9grid));
			set(layer[get(thumbBorderName)].parent, get(thumbName));
			set(layer[get(thumbBorderName)].x, get(negativeOffsetX_thumbnailsBar_theme02));
			set(layer[get(thumbBorderName)].y, get(negativeOffsetY_thumbnailsBar_theme02));
			set(layer[get(thumbBorderName)].onclick, resetMouseBehavior_thumbnailsBar_theme02(); mainloadscene(%1); highlightThumb_thumbnailsBar_theme02(%1));
		,
			
				set(layer[get(thumbBorderName)].x, get(thumbIncPos_thumbnailsBar_theme02)); 
				
		);
		
		
		setupMouseBehavior_thumbnailsBar_theme02(%1, %4);
		
	</action>
	
	
	<action name="removeThumb_thumbnailsBar_theme02">
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar_theme02');
		removelayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');
		removelayer(get(thumbBorderName));
	</action>
	
	
	
	<action name="setupArrows_thumbnailsBar_theme02">
		
		if(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent,
			hideArrows_thumbnailsBar_theme02();
		,
			ifnot(device.touchdevice,
				
					if(layer[scrollAreaContainer_thumbnailsBar_theme02].width LT layer[thumbsScrollArea_thumbnailsBar_theme02].width,
				
					showArrows_thumbnailsBar_theme02();
				,
					hideArrows_thumbnailsBar_theme02();
				);
			,
				hideArrows_thumbnailsBar_theme02();
			);
		);
		
		
		if(%1,
			scrollToCurrentThumb_thumbnailsBar_theme02();
		);
		
		
			
			if(layer[scrollAreaContainer_thumbnailsBar_theme02].width LT layer[scrollAreaContainer_thumbnailsBar_theme02].itemWidth,
				set(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].visible, false);
			);
	</action>
	
	
	<action name="showArrows_thumbnailsBar_theme02">
		
		
		
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].visible, true);
		set(layer[scrollNextArrow_thumbnailsBar_theme02].visible, true);
		
		
		
			
			add(totalArrowSize_thumbnailsBar_theme02, get(layer[scrollPrevArrow_thumbnailsBar_theme02].width), get(layer[scrollNextArrow_thumbnailsBar_theme02].width));
		
			
			sub(scrollAreaContainerSize_thumbnailsBar_theme02, get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelwidth), get(totalArrowSize_thumbnailsBar_theme02));
		
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].width, get(scrollAreaContainerSize_thumbnailsBar_theme02));
			
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].x, get(layer[scrollPrevArrow_thumbnailsBar_theme02].width));
			
		
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].onhover, scrollPrev_thumbnailsBar_theme02(););
		set(layer[scrollNextArrow_thumbnailsBar_theme02].onhover, scrollNext_thumbnailsBar_theme02(););
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].onclick, scrollPrev_thumbnailsBar_theme02(get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedAcceleration)););
		set(layer[scrollNextArrow_thumbnailsBar_theme02].onclick, scrollNext_thumbnailsBar_theme02(get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedAcceleration)););
		
		
		
		
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].onout, set(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed, get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedInit)););
		set(layer[scrollNextArrow_thumbnailsBar_theme02].onout, set(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed, get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedInit)););
		
	</action>
	
	
	
	
	<action name="hideArrows_thumbnailsBar_theme02">
		
		set(layer[scrollPrevArrow_thumbnailsBar_theme02].visible, false);
		set(layer[scrollNextArrow_thumbnailsBar_theme02].visible, false);
		
		

			mul(totalMargin_thumbnailsBar_theme02, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginX), 2);
			
			sub(scrollAreaContainerSize_thumbnailsBar_theme02, get(layer[get(layer[scrollAreaContainer_thumbnailsBar_theme02].parent)].pixelwidth), get(totalMargin_thumbnailsBar_theme02));

			set(layer[scrollAreaContainer_thumbnailsBar_theme02].width, get(scrollAreaContainerSize_thumbnailsBar_theme02));
			set(layer[scrollAreaContainer_thumbnailsBar_theme02].x, get(layer[scrollAreaContainer_thumbnailsBar_theme02].marginX));
			 
			
	</action>
	
	
	<action name="scrollPrev_thumbnailsBar_theme02">
		
		
		if(%1,
			inc(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea_thumbnailsBar_theme02].stopscrolling();
		
		set(scrollLimit_thumbnailsBar_theme02, 0);
		
		
			
				sub(scrollLimit_thumbnailsBar_theme02, get(layer[thumbsScrollArea_thumbnailsBar_theme02].width), get(layer[scrollAreaContainer_thumbnailsBar_theme02].width));
				div(scrollLimit_thumbnailsBar_theme02, 2);
			
			add(layer[thumbsScrollArea_thumbnailsBar_theme02].x, get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed));
			if(layer[thumbsScrollArea_thumbnailsBar_theme02].x GE scrollLimit_thumbnailsBar_theme02,
				set(layer[thumbsScrollArea_thumbnailsBar_theme02].x, get(scrollLimit_thumbnailsBar_theme02));
			);
		
		if(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed LT layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedMax,
			inc(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed);
		);
		
	</action>
	
	
	<action name="scrollNext_thumbnailsBar_theme02">
		
		
		if(%1,
			inc(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea_thumbnailsBar_theme02].stopscrolling();
		
			
			sub(scrollLimit_thumbnailsBar_theme02, get(layer[thumbsScrollArea_thumbnailsBar_theme02].width), get(layer[scrollAreaContainer_thumbnailsBar_theme02].width));
			
				div(scrollLimit_thumbnailsBar_theme02, 2);
			mul(scrollLimit_thumbnailsBar_theme02, -1);
			
			sub(layer[thumbsScrollArea_thumbnailsBar_theme02].x, get(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed));
			if(layer[thumbsScrollArea_thumbnailsBar_theme02].x LE scrollLimit_thumbnailsBar_theme02,
				set(layer[thumbsScrollArea_thumbnailsBar_theme02].x, get(scrollLimit_thumbnailsBar_theme02));
			);
		
		if(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed LT layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeedMax,
			inc(layer[scrollAreaContainer_thumbnailsBar_theme02].scrollSpeed);
		);
		
	</action>
	
	
	<action name="resetMouseBehavior_thumbnailsBar_theme02">
	
		
		
		
		set(j_thumbnailsBar_theme02_wait,30);
		
			for( set(j_thumbnailsBar_theme02, 0), j_thumbnailsBar_theme02 LT scene.count, inc(j_thumbnailsBar_theme02),
				if(j_thumbnailsBar_theme02_wait == j_thumbnailsBar_theme02,
					add(j_thumbnailsBar_theme02_wait,30);
					wait(0);
				);
				set(thumbBorderName, 'thumbBorder_');
				txtadd(thumbBorderName, get(scene[get(j_thumbnailsBar_theme02)].name));
				txtadd(thumbBorderName, '_thumbnailsBar_theme02');
				
				setupMouseBehavior_thumbnailsBar_theme02(get(scene[get(j_thumbnailsBar_theme02)].name), get(scene[get(j_thumbnailsBar_theme02)].titleid));
			);
		
	</action>
	
	
	<action name="setupMouseBehavior_thumbnailsBar_theme02">

		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar_theme02');
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');
		
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropDefault));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropHover));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropHover));
			set(layer[get(thumbBorderName)].tooltip, %2);
				set(layer[get(thumbBorderName)].onhover, showTooltip('plugin', tooltipStyle_thumbnailsBar_theme02));
				set(layer[get(thumbBorderName)].onout, hideTooltip());
		,
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderColorDefault));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderAlphaDefault));
				set(layer[get(thumbName)].tooltip, %2);
				set(layer[get(thumbName)].onhover, showTooltip('plugin', tooltipStyle_thumbnailsBar_theme02));
			
			set(layer[get(thumbName)].onover, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderColorHover));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderAlphaHover));
			);
			
			set(layer[get(thumbName)].onout, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderColorDefault));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderAlphaDefault));
				hideTooltip();
			);
		);
	
	</action>
	
	
	<action name="highlightCurrentThumb_thumbnailsBar_theme02">
			highlightThumb_thumbnailsBar_theme02(get(xml.scene));
	</action>
	
	
	<action name="highlightThumb_thumbnailsBar_theme02">
	
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');
		
		if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropSelected));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropSelected));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].cropSelected));
		,
			set(thumbName, 'thumb_');
			txtadd(thumbName, %1);
			txtadd(thumbName, '_thumbnailsBar_theme02');
			
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderColorSelected));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource_thumbnailsBar_theme02].borderAlphaSelected));
			
			set(layer[get(thumbName)].onover, "");
			set(layer[get(thumbName)].onout, hideTooltip(););
		);

		scrollToThumb_thumbnailsBar_theme02(%1);
	</action>
	
	
	<action name="scrollToCurrentThumb_thumbnailsBar_theme02">
			scrollToThumb_thumbnailsBar_theme02(get(xml.scene));
	</action>
	
	
	<action name="scrollToThumb_thumbnailsBar_theme02">
		
		set(thumbName, 'thumb_');
		set(thumbBorderName, 'thumbBorder_');
		
		txtadd(thumbName, %1);
		txtadd(thumbName, '_thumbnailsBar_theme02');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '_thumbnailsBar_theme02');

			set(posX_thumbnailsBar_theme02, 0);
			if(layer[thumbnailBorderSource_thumbnailsBar_theme02].url,
				div(halfThumbWidth_thumbnailsBar_theme02, get(layer[get(thumbName)].width), 2);
				ifnot(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent,
					add(posX_thumbnailsBar_theme02, get(layer[get(thumbName)].x), get(halfThumbWidth_thumbnailsBar_theme02));
				);
				if(layer[thumbsScrollArea_thumbnailsBar_theme02].scrolltocenter,
					layer[thumbsScrollArea_thumbnailsBar_theme02].scrolltocenter(get(posX_thumbnailsBar_theme02), 0);
				);
			,
				div(halfThumbWidth_thumbnailsBar_theme02, get(layer[get(thumbBorderName)].width), 2);
				ifnot(layer[scrollAreaContainer_thumbnailsBar_theme02].adjustToContent,
					add(posX_thumbnailsBar_theme02, get(layer[get(thumbBorderName)].x), get(halfThumbWidth_thumbnailsBar_theme02));
				);
				if(layer[thumbsScrollArea_thumbnailsBar_theme02].scrolltocenter,
					layer[thumbsScrollArea_thumbnailsBar_theme02].scrolltocenter(get(posX_thumbnailsBar_theme02), 0);
				);
			);
		
	</action>
	




<!-- ********** -->
<!-- Barra de Control de VÃ­deo -->
<!-- id : videoControlBar -->
<!-- ********** -->






	<events name="videoControlBar_events"
		onenterfullscreen.fullscreensupport="videoControlBar_fs_button_update(true);"
		onexitfullscreen.fullscreensupport="videoControlBar_fs_button_update(false);"

		onTourStart="set(layer[videoControlBar_footer].canstart, true);if(layer[videoControlBar_footer].isready,videoControlBar_show(););"
		videointerfaceready="videoControlBar_init_menu();set(layer[videoControlBar_footer].isready, true);if(layer[videoControlBar_footer].canstart,videoControlBar_show(););"
		onremovepano="videoControlBar_hide();"
		onpausevideointerface="videoControlBar_update_pausestate();"
		onplayvideointerface="videoControlBar_update_pausestate();"
		changetourlanguage="videoControlBar_update_language();"
		keep="true"
		/>


	<action name="videoControlBar_init_menu">
		ifnot(device.fullscreensupport,
			
			ifnot(videoControlBar_fullscreenoff,set(layer[videoControlBar_pj_button].x, 0););
			ifnot(videoControlBar_fullscreenoff,set(layer[videoControlBar_quality].x, calc(layer[videoControlBar_quality].x - 30)););
			set(videoControlBar_fullscreenoff, true);
		);
		if(!device.panovideosupport OR scene[get(xml.scene)].planar == true,
			set(layer[videoControlBar_pj_button].visible, false);
		,
			set(layer[videoControlBar_pj_button].visible, true);
		);
		if(videoControlBar_fullscreenoff,
			set(layer[videoControlBar_pj_button].x, 0);
		,
			set(layer[videoControlBar_pj_button].x, calc(layer[videoControlBar_fs_button].x + 30));
			set(layer[videoControlBar_quality].x, calc(layer[videoControlBar_pj_button].x + 30));
		);
		set(videoControlBar_menuposx, 2);
		set(videoControlBar_menuposy, 40);
		videoControlBar_createmenu(qualitymenu, bottomright, 150, get(videoControlBar_menuposx), get(videoControlBar_menuposy));
		videoControlBar_setup_video_quality();

		if(device.panovideosupport AND scene[get(xml.scene)].planar == false,
			videoControlBar_createmenu(viewmenu, bottomright, 150, get(videoControlBar_menuposx), get(videoControlBar_menuposy));
			getmessage(projection_caption, videoControlBarsourcelabel);
			videoControlBar_addmenuitem(viewmenu, sour, get(projection_caption), videoControlBar_source_view() );
			getmessage(projection_caption, videoControlBarnormallabel);
			videoControlBar_addmenuitem(viewmenu, rect, get(projection_caption), videoControlBar_rectilinear_view() );

			videoControlBar_selectmenuitem(viewmenu, rect);
		);
	</action>

	<action name="videoControlBar_update_language">

		if(scene[get(xml.scene)].name,
			getmessage(layer[videoControlBar_title].html, get(scene[get(xml.scene)].titleid));
			escape(layer[videoControlBar_title].html);
		);

if(videoControlBar_quality_counter GT 1,
	getmessage(quality_caption_high, videoControlBarquality_high_tip);
	getmessage(quality_caption_low, videoControlBarquality_low_tip);
	videoControlBar_updatemenuitem(qualitymenu, q1, get(quality_caption_high));
	videoControlBar_updatemenuitem(qualitymenu, q1, get(quality_caption_low));
	if(videoControlBar_current_videoscene_quality == 'low',
		videoControlBar_changequality_txt(get(quality_caption_low));
	,
		videoControlBar_changequality_txt(get(quality_caption_high));
	);
);
	getmessage(projection_caption, videoControlBarsourcelabel);
	videoControlBar_updatemenuitem(viewmenu, sour, get(projection_caption));
	getmessage(projection_caption, videoControlBarnormallabel);
	videoControlBar_updatemenuitem(viewmenu, rect, get(projection_caption));
	</action>


	<action name="videoControlBar_show">
		if(scene[get(xml.scene)].video,
			set(videointerface_controlbar_update, 'videoControlBar_apply_timer');
			videoControlBar_show_header();
			videoControlBar_show_seekbar();
			videoControlBar_show_footer();
		);
	</action>
	<action name="videoControlBar_hide">
		videoControlBar_hide_header();
		videoControlBar_hide_seekbar();
		videoControlBar_hide_footer();
		videoControlBar_hidemenu(viewmenu);
		videoControlBar_hidemenu(qualitymenu);
	</action>


	<layer name="videoControlBar_header"
		type="container"
		bgcolor="0x000000"
		bgalpha="0.7000076295109483"
		align="lefttop"
		x="0"
		y="0"
		zorder="13"
		enabled="true"
		capture="true"
		visible="false"
		height="30"
		width="100%"
		keep="true"
		>
		<layer name="videoControlBar_title"
			type="image"
			style="videoControlBar_titletxt_base"
			x="5"
			y="1"
			zorder="1"
			visible="false"
			/>
	</layer>
	<action name="videoControlBar_hide_header">
		set(layer[videoControlBar_header].visible, false);
	</action>
	<action name="videoControlBar_show_header">
		if(scene[get(xml.scene)].name,
			getmessage(layer[videoControlBar_title].html, get(scene[get(xml.scene)].titleid));
			escape(layer[videoControlBar_title].html);
			set(layer[videoControlBar_title].visible, true);
		);
		set(layer[videoControlBar_header].visible, true);
	</action>


	<layer name="videoControlBar_footer"
		type="container"
		bgcolor="0x000000"
		bgalpha="0.7000076295109483"
		align="bottomleft"
		x="0"
		y="0"
		zorder="13"
		enabled="true"
		capture="false"
		visible="false"
		height="30"
		width="100%"
		keep="true"
		>


		<layer name="videoControlBar_pp_button"
			style="videoControlBar_baseimage|videoControlBar_over" crop="0|0|30|30"
			align="bottomleft" x="0" y="0" zorder="1" width="30" height="30"
			onclick="videoControlBar_togglepause();"
			tooltip="videoControlBarplay_tip"
			/>

		<layer name="videoControlBar_snd_button"
			style="videoControlBar_baseimage|videoControlBar_over" crop="210|0|30|30"
			align="bottomleft" x="30" y="0" zorder="1" width="30" height="30"
			onclick="videoControlBar_togglesound();"
			tooltip="videoControlBarsound_mute_tip"
			/>


		<layer name="videoControlBar_timer"
			style="videoControlBar_timertxt_base" 
			x="65" y="0" zorder="1"
			html=""
			onautosized="videoControlBar_changetotaltime_pos();"
			/>

		<layer name="videoControlBar_timer_total"
			style="videoControlBar_timertxt_base" 
			x="65" y="0" zorder="1"
			baseposx="65"
			html=""
			/>


		<layer name="videoControlBar_fs_button" devices="fullscreensupport"
			style="videoControlBar_baseimage|videoControlBar_over" crop="60|0|30|30"
			align="bottomright" x="0" y="0" zorder="1" width="30" height="30"
			fs_state="false"
			onclick="videoControlBar_hidemenu(viewmenu);videoControlBar_hidemenu(qualitymenu);if(fs_state == false,enterFullscreen();
,exitFullscreen();
);"
			tooltip="videoControlBarfullscreen_open_tip"
			/>


		<layer name="videoControlBar_pj_button" devices="panovideosupport"
			style="videoControlBar_baseimage|videoControlBar_over" crop="240|0|30|30"
			align="bottomright" x="30" y="0" zorder="1" width="30" height="30"
			onclick="videoControlBar_toggle_viewmenu();"
			tooltip="videoControlBarprojection_tip"
			/>


		<layer name="videoControlBar_quality" devices="panovideosupport"
			type="container" width="10" height="30"
			align="bottomright" x="65" y="0" zorder="1"
			>
				<layer name="videoControlBar_quality_button_txt"
					style="videoControlBar_menutxt_base|videoControlBar_menutxt_normal" 
					align="bottomright" x="0" y="0" zorder="2"
					html=""
					onclick="videoControlBar_toggle_qualitymenu();"
					onautosized="videoControlBar_changequality_pos();"
					/>

				<layer name="videoControlBar_quality_button"
					style="videoControlBar_qualityimage" width="10" height="prop"
					align="right" x="0" y="0" zorder="2"
					onclick="videoControlBar_toggle_qualitymenu();"
					tooltip="videoControlBarquality_tip"
					onhover="videoControlBar_btntooltip_show();"
					onout="videoControlBar_btntooltip_hide();"
					/>
		</layer>

	</layer>
	<action name="videoControlBar_hide_footer">
		set(layer[videoControlBar_footer].visible, false);
	</action>
	<action name="videoControlBar_show_footer">
		set(layer[videoControlBar_footer].visible, true);
	</action>


	<layer name="videoControlBar_btntooltip"
		style="videoControlBar_tooltiptxt_base" 
		zorder="3"
		html=""
		edge="center"
		visible="false"
		keep="true"
		xoffset="0"
		yoffset="0"
		/>
	<action name="videoControlBar_btntooltip_show">
		if(tooltip,
			showTooltip('plugin', videoControlBar_btntooltip, bottom);
		);
	</action>
	<action name="videoControlBar_btntooltip_hide">
		hideTooltip();
	</action>


	<layer name="videoControlBar_seekbar"
		type="container"
		bgcolor="0x000000"
		bgalpha="0.7000076295109483"
		align="bottomleft"
		x="0"
		y="30"
		zorder="14"
		enabled="true"
		capture="true"
		bgcapture="true"
		visible="true"
		height="10"
		width="100%"
		ondown="if(plugin[get(videointerface_video)].isvideoready, asyncloop(pressed, videoControlBar_seekbar_seeking() ); );"
		onup="if(plugin[get(videointerface_video)].isvideoready, plugin[get(videointerface_video)].seek(get(seekpos_percent_text)); );"

		onhover="videoControlBar_timetooltip_show();"
		onout="videoControlBar_timetooltip_hide();"

		keep="true"
		>


		<layer name="videoControlBar_timetooltip"
			style="videoControlBar_tooltiptxt_base" 
			x="0" y="18" zorder="2"
			html=""
			tooltip=""
			edge="center"
			visible="false"
			/>

		<layer name="videoControlBar_loader"
			type="container"
			bgcolor="0xff6600"
			bgalpha="0.50000762951094835"
			align="bottomleft"
			x="0"
			y="0"
			zorder="1"
			enabled="false"
			capture="false"
			visible="true"
			height="10"
			width="0%"
			/>
		<layer name="videoControlBar_time"
			type="container"
			bgcolor="0xff6600"
			bgalpha="1"
			align="bottomleft"
			x="0"
			y="0"
			zorder="2"
			enabled="false"
			capture="false"
			visible="true"
			height="10"
			width="0%"
			/>
	</layer>
	<action name="videoControlBar_hide_seekbar">
		<!-- set(layer[videoControlBar_seekbar].y, 0); -->
		set(layer[videoControlBar_seekbar].visible, false);
	</action>
	<action name="videoControlBar_show_seekbar">
		<!-- set(layer[videoControlBar_seekbar].y, 30); -->
		set(layer[videoControlBar_seekbar].visible, true);
	</action>


	<action name="videoControlBar_seekbar_seeking">
		screentolayer(videoControlBar_seekbar, mouse.stagex, mouse.stagey, lx, ly);
		div(seekpos, lx, layer[videoControlBar_seekbar].pixelwidth);
		mul(seekpos_percent, seekpos, 100);
		clamp(seekpos_percent, 0, 100);
		txtadd(seekpos_percent_text, get(seekpos_percent), '%');
	</action>

	<action name="videoControlBar_timetooltip_show">
		screentolayer(videoControlBar_seekbar, mouse.stagex, mouse.stagey, lx, ly);
		div(tooltippos, lx, layer[videoControlBar_seekbar].pixelwidth);
		mul(tooltippos_percent, tooltippos, 100);
		clamp(tooltippos_percent, 0, 100);

		copy(vpc, plugin[get(videointerface_video)]);
		if(vpc AND vpc.loaded AND vpc.isvideoready AND vpc.isseeking == false,
			copy(tt, vpc.totaltime);

			mul(ttime, tooltippos_percent, tt);
			div(ttime, 100);

			videoControlBar_format_sec_to_hhmmss(ttime, layer[videoControlBar_timetooltip].html, false);
			
			set(layer[videoControlBar_timetooltip].x, get(lx));
			set(layer[videoControlBar_timetooltip].visible, true);
		);
		delete(vpc);
	</action>
	<action name="videoControlBar_timetooltip_hide">
		set(layer[videoControlBar_timetooltip].visible, false);
	</action>



	<action name="videoControlBar_fs_button_update" devices="fullscreensupport">
		if (%1,
			set(layer[videoControlBar_fs_button].fs_state, true);
			set(layer[videoControlBar_fs_button].crop, 90|0|30|30);
			set(layer[videoControlBar_fs_button].tooltip,'videoControlBarfullscreen_close_tip');
		,
			set(layer[videoControlBar_fs_button].fs_state, false);
			set(layer[videoControlBar_fs_button].crop, 60|0|30|30);
			set(layer[videoControlBar_fs_button].tooltip,'videoControlBarfullscreen_open_tip');
		);
	</action>


	<action name="videoControlBar_createmenu">
		set(name_w, 'videoControlBar_%1_window');
		set(name_m, 'videoControlBar_%1_menu');
		addlayer(get(name_w));
		addlayer(get(name_m));
		copy(layer_w, layer[get(name_w)]);
		copy(layer_m, layer[get(name_m)]);

		set(layer_w.parent, 'videoControlBar_footer');
		set(layer_w.type, container);
		set(layer_w.maskchildren, true);
		set(layer_w.align, %2);
		set(layer_w.width, %3);
		set(layer_w.height, 0);
		set(layer_w.x, %4);
		set(layer_w.y, %5);
		set(layer_w.bgcolor, 0x000000);
		set(layer_w.bgalpha, 0.7000076295109483);
		set(layer_w.visible, false);

		set(layer_m.state, 'closed');
		set(layer_m.parent, get(name_w));
		set(layer_m.type, container);
		set(layer_m.maskchildren, true);
		set(layer_m.align, lefttop);
		sub(layer_m.width, %3, 12);
		set(layer_m.height, 6);
		set(layer_m.x, 6);
		set(layer_m.y, 6);
	</action>


	<action name="videoControlBar_addmenuitem">
		set(name_w, 'videoControlBar_%1_window');
		set(name_m, 'videoControlBar_%1_menu');
		set(name_i, 'videoControlBar_%1_menuitem_%2');
		addlayer(get(name_i));
		copy(layer_w, layer[get(name_w)]);
		copy(layer_m, layer[get(name_m)]);
		copy(layer_i, layer[get(name_i)]);

		set(layer_i.parent, get(name_m));
		sub(layer_i.y, layer_m.height, 6);

		set(caption, %3);
		set(method, %4);

		if(caption,
			set(layer_i.html, %3);
			layer_i.loadstyle(videoControlBar_menuitem_base|videoControlBar_menuitem_normal);
			add(layer_m.height, 26);
			add(layer_w.height, layer_m.height, 6);
		,
			add(layer_i.y, 6);
			set(layer_i.width, 100%);
			set(layer_i.height, 1);
			set(layer_i.type, container);
			set(layer_i.bgalpha, 1.0);
			set(layer_i.bgcolor, 0xFFFFFF);
			add(layer_m.height, 13);
			add(layer_w.height, layer_m.height, 6);
		);
		if(method,
			set(layer_i.onclick, %4);
		);
		delete(caption, method, name_w, name_m, name_i, layer_i);
	</action>


	<action name="videoControlBar_updatemenuitem">
		set(name_i, 'videoControlBar_%1_menuitem_%2');
		addlayer(get(name_i));
		copy(layer_i, layer[get(name_i)]);

		set(caption, %3);

		if(caption,
			set(layer_i.html, %3);
			<!--
			layer_i.loadstyle(videoControlBar_menuitem_base|videoControlBar_menuitem_normal);
			-->
		);
		delete(caption, name_i, layer_i);
	</action>


	<action name="videoControlBar_selectmenuitem">
		set(name_i, 'videoControlBar_%1_menuitem_%2');
		copy(layer_i, layer[get(name_i)]);
		if(layer_i,
			if(%3 !== false,
				layer_i.loadstyle(videoControlBar_menuitem_selected);
			,
				layer_i.loadstyle(videoControlBar_menuitem_normal);
			);
		);
		delete(name_i);
	</action>


	<action name="videoControlBar_deselectmenuitem">
		videoControlBar_selectmenuitem(%1, %2, false);
	</action>


	<action name="videoControlBar_toggle_viewmenu">
		if(layer[videoControlBar_viewmenu_menu].state == 'closed',
			if(layer[videoControlBar_qualitymenu_menu].state == 'opened', videoControlBar_hidemenu(qualitymenu) );
			videoControlBar_showmenu(viewmenu);
		,
			videoControlBar_hidemenu(viewmenu);
		);
	</action>


	<action name="videoControlBar_update_viewmenu">
		resolvecondition(issour, %1 == sour);
		resolvecondition(isrect, %1 == rect);
		videoControlBar_selectmenuitem(viewmenu, sour, get(issour));
		videoControlBar_selectmenuitem(viewmenu, rect, get(isrect));
		delete(issour, isrect);
		videoControlBar_hidemenu(viewmenu);
	</action>


	<action name="videoControlBar_source_view">
		videoControlBar_update_viewmenu(sour);
		
		setViewSource();
	</action>


<action name="setViewSource">
	if(normalViewActivated,stopSetViewTweens(););
	setViewSourceComplete();
</action>

<action name="setViewSourceComplete">
	if(current_view_isflat !== true,
		set(current_view_isflat, true);
		stoptween(view.fov);
		mod(view.hlookat, 360);
		set(view.limitview, off);
		set(view.maxpixelzoom, 0);
		copy(video_controlbar_backup_fovmin, view.fovmin);
		copy(video_controlbar_backup_fov, view.fov);
		set(view.fovmin, 0.01);
		set(control.usercontrol, off);

		copy(current_fov, view.fov);
		remapfovtype(current_fov, get(view.fovtype), HFOV);
		set(view.fovtype, HFOV);
		copy(view.fov, current_fov);
		copy(startfov, current_fov);

		copy(image_hfov, image.hfov);
		tween(image_hfov, 1.0, 3.0, linear,
			set(control.usercontrol,all);
			set(view.fovmin, 0.25);
			set(view.hlookatmin, -2);
			set(view.hlookatmax, +2);
			set(view.vlookatmin, -1);
			set(view.vlookatmax, +1);
			set(view.limitview, range);
		,
			if(image_hfov LT 90,
				mul(view.fov, image_hfov, 1.1);
			,
				sub(hr, image_hfov, 90);
				div(hr, 270);
				sub(hr2, 1, hr);
				mul(a, startfov, hr);
				mul(b, 99, hr2);
				add(view.fov, a,b);
			);
			copy(image.hfov, image_hfov);
			set(image.vfov, 0);
			set(view.pannini, 0.0);
			updateobject(true, true);
		);

		adjusthlookat(0);
		tween(view.hlookat, 0, 1.5);
		tween(view.vlookat, 0, 1.5);
	);
</action>


<action name="setViewNonFlat">
	if(current_view_isflat === true,
		set(current_view_isflat, false);
		set(view.limitview, off);
		set(control.usercontrol, all);

		copy(current_fov, view.fov);
		remapfovtype(current_fov, get(view.fovtype), %1);
		set(view.fovtype, %1);
		copy(view.fov, current_fov);
		copy(image_hfov, image.hfov);

		if(view.fovtype == VFOV,
			if(scene[get(xml.scene)].planar,
				set(view.limitview, fullrange);
			,
				set(view.limitview, range);
				set(view.hlookatmin, get(panoview.hmin));
				set(view.hlookatmax, get(panoview.hmax));
				set(view.vlookatmin, get(panoview.vmin));
				set(view.vlookatmax, get(panoview.vmax));
			);
		);
	
		tween(image_hfov, 360.0, 3.0, linear,
			copy(view.fovmin, video_controlbar_backup_fovmin);
			if(view.fovtype != VFOV,
				if(scene[get(xml.scene)].planar,
					set(view.limitview, fullrange);
				,
					set(view.limitview, range);
					set(view.hlookatmin, get(panoview.hmin));
					set(view.hlookatmax, get(panoview.hmax));
					set(view.vlookatmin, get(panoview.vmin));
					set(view.vlookatmax, get(panoview.vmax));
				);
			);
		,
			copy(image.hfov, image_hfov);
			set(image.vfov, 0);
			updateobject(true, true);
		);
	,
		copy(current_fov, view.fov);
		remapfovtype(current_fov, get(view.fovtype), %1);
		set(view.fovtype, %1);
		copy(view.fov, current_fov);
	);

	if(view.vlookat LT -60 OR view.vlookat GT +60,
		tween(view.vlookat, 0.0, 0.30, easeInOutSine);
	);
</action>



	<action name="videoControlBar_rectilinear_view">
		videoControlBar_update_viewmenu(rect);setViewNormal();

	</action>









	<action name="videoControlBar_toggle_qualitymenu">
		if(layer[videoControlBar_qualitymenu_menu].state == 'closed',
			if(layer[videoControlBar_viewmenu_menu].state == 'opened', videoControlBar_hidemenu(viewmenu) );
			videoControlBar_showmenu(qualitymenu);
		,
			videoControlBar_hidemenu(qualitymenu);
		);
	</action>


	<action name="videoControlBar_showmenu">
		set(layer[videoControlBar_%1_menu].state, 'opened');
		set(layer[videoControlBar_%1_window].visible, true);
		delayedcall(videoControlBar_view_stop, 4.0, videoControlBar_hidemenu(viewmenu););
		delayedcall(videoControlBar_quality_stop, 4.0, videoControlBar_hidemenu(qualitymenu););
	</action>


	<action name="videoControlBar_hidemenu">
		stopdelayedcall(videoControlBar_view_stop);
		stopdelayedcall(videoControlBar_quality_stop);
		set(layer[videoControlBar_%1_menu].state, 'closed');
		set(layer[videoControlBar_%1_window].visible, false);
	</action>


	<style name="videoControlBar_baseimage" url="%FIRSTXML%/graphics/videocontrolbar/videointerface_skin_kolor.png" />
	<style name="videoControlBar_qualityimage" url="%FIRSTXML%/graphics/videocontrolbar/quality_skin_kolor.png" />


	<style name="videoControlBar_timertxt_base" url="%FIRSTXML%/graphics/textfield.swf" align="bottomleft" vcenter="true" autowidth="true" 
		height="30" padding="0" background="false" capture="false" enabled="false" border="false" 
		css="text-align:left;color:#ffffff;font-family:Arial;font-size:16px;" />

	<style name="videoControlBar_tooltiptxt_base" url="%FIRSTXML%/graphics/textfield.swf" align="bottomleft" vcenter="true" autowidth="true" 
		height="14" padding="0 2" roundedge="2" 
		 background="true" backgroundcolor="0xeeeeee" backgroundalpha="1"
		 border="false"
		
		capture="false" enabled="false" 
		css="text-align:left;color:#000000;font-family:Arial;font-weight:bold;font-size:11px;" />



	<style name="videoControlBar_titletxt_base" url="%FIRSTXML%/graphics/textfield.swf" align="topleft" vcenter="true" wordwrap="false"  
		height="30" padding="0" background="false" capture="false" enabled="true" border="false" 
		css="text-align:left;color:#ffffff;font-family:Arial;font-size:14px;" 
		/>


	<style name="videoControlBar_menutxt_base" url="%FIRSTXML%/graphics/textfield.swf" align="bottomright" x="0" vcenter="true" autowidth="true" 
		height="30" padding="0 0 0 5" background="false" border="false" 
		onover="loadstyle(videoControlBar_menutxt_over);" onout="loadstyle(videoControlBar_menutxt_normal);" 
		ondown.touch="onover();" onup.touch="onout();" />
	<style name="videoControlBar_menutxt_normal" enabled="true" alpha="1.0" 
		css="text-align:right; color:#ffffff;font-family:Arial;font-size:16px;" />
	<style name="videoControlBar_menutxt_over" enabled="true" alpha="1.0" 
		css="text-align:right; color:#ff6600;font-family:Arial;font-size:16px;" />
	<style name="videoControlBar_menuitem_base" url="%FIRSTXML%/graphics/textfield.swf" align="lefttop" x="0" vcenter="true" 
		width="138" height="26" padding="0 3" background="false" backgroundcolor="0xff6600" backgroundalpha="1.0" border="false" 
		onover="set(background,true);" onout="set(background,false);" ondown.touch="onover();" onup.touch="onout();" />
	<style name="videoControlBar_menuitem_normal" textshadow="0.0" enabled="true" alpha="1.0" 
		css="text-align:left; color:#ffffff;font-family:Arial;font-size:16px;" />
	<style name="videoControlBar_menuitem_selected" textshadow="0.01" enabled="true" alpha="1.0" 
		css="text-align:left; color:#ff6600;font-family:Arial;font-size:16px;" />


	<action name="videoControlBar_changequality_pos">
		set(layer[videoControlBar_quality_button].x, get(layer[videoControlBar_quality_button_txt].width));
		set(layer[videoControlBar_quality].width, get(layer[videoControlBar_quality_button_txt].width));
		add(layer[videoControlBar_quality].width, 15);
	</action>
	<action name="videoControlBar_changequality_txt">
		set(layer[videoControlBar_quality_button_txt].html, %1);
	</action>

	<action name="videoControlBar_changetotaltime_pos">
		set(layer[videoControlBar_timer_total].x, get(layer[videoControlBar_timer].width));
		add(layer[videoControlBar_timer_total].x, get(layer[videoControlBar_timer_total].baseposx));
	</action>



	<style name="videoControlBar_over"
		ondown="videoControlBar_buttonover(get(name));"
		onhover="videoControlBar_btntooltip_show();"
		onover="videoControlBar_buttonover(get(name));"
		onout="videoControlBar_buttonover(null);videoControlBar_btntooltip_hide();"
		/>
	<action name="videoControlBar_buttonover">
		set(skin_newover_bt, %1);
		set(skin_newover_part2, '');

		indexoftxt(skin_overpos1, get(crop), '|');
		subtxt(skin_over_part1, get(crop), 0, get(skin_overpos1));
		inc(skin_overpos1);
		subtxt(skin_over1, get(crop), get(skin_overpos1), 8);
		indexoftxt(skin_overpos2, get(skin_over1), '|');
		subtxt(skin_newover_part2, get(skin_over1), 0, 2);
		txtreplace(skin_newover_part2, '|', '');
		inc(skin_overpos2);
		subtxt(skin_over2, get(skin_over1), get(skin_overpos2), 8);

		if(%1 != null,
			txtadd(skin_newover, get(skin_over_part1), '|30|', get(skin_over2));
		,
			txtadd(skin_newover, get(skin_over_part1), '|0|', get(skin_over2));
		);
		set(crop, get(skin_newover));
		delete(skin_newover, skin_over_part1, skin_over2, skin_over1, skin_overpos2, skin_overpos1);
	</action>


	<action name="videoControlBar_format_sec_to_hhmmss">
		copy(t,%1);
		div(hh,get(t),3600);
		Math.floor(hh);
		roundval(hh);
		div(mm,t,60);
		mod(mm,60);
		Math.floor(mm);
		roundval(mm);
		copy(ss,t);
		mod(ss,60);
		Math.floor(ss);
		roundval(ss);
		if(hh GT 0, if(mm LT 10, txtadd(mm, '0', get(mm)); ); );
		if(ss LT 10, txtadd(ss, '0', get(ss)); );
		txtadd(ft, get(mm),':',get(ss));
		if(hh GT 0, txtadd(ft,get(hh),':',get(ft)); );
		if(%3, txtadd(ft,'&#x00A0;/&#x00A0;',get(ft)); );
		copy(%2,ft);
	</action>


<action name="videoControlBar_apply_timer">
	videoControlBar_format_sec_to_hhmmss(%1, layer[videoControlBar_timer].html, false);
	videoControlBar_format_sec_to_hhmmss(%2, layer[videoControlBar_timer_total].html, true);

	copy(layer[videoControlBar_loader].width, %3);
	copy(layer[videoControlBar_time].width, %4);
</action>


	<action name="videoControlBar_setup_video_quality">
		set(videoControlBar_quality_counter, 0);
		getmessage(quality_caption_high, videoControlBarquality_high_tip);
		videoControlBar_addmenuitem(qualitymenu, q1, get(quality_caption_high), videoControlBar_change_video_file(q1, get(quality_caption_high), get(scene[get(xml.scene)].scenevideourl), get(scene[get(xml.scene)].scenevideoposterurl), 'high'); );
		inc(videoControlBar_quality_counter);
		if(scene[get(xml.scene)].scenevideolowresurl != '',
			getmessage(quality_caption_low, videoControlBarquality_low_tip);
			videoControlBar_addmenuitem(qualitymenu, q2,  get(quality_caption_low), videoControlBar_change_video_file(q2, get(quality_caption_low), get(scene[get(xml.scene)].scenevideolowresurl), get(scene[get(xml.scene)].scenevideolowresposterurl), 'low'); ); 
			inc(videoControlBar_quality_counter);
		);
		
		if(videoControlBar_quality_counter GT 1,
			if(videoControlBar_current_videoscene_quality == 'low',
				videoControlBar_selectmenuitem(qualitymenu, q2);
				videoControlBar_changequality_txt(get(quality_caption_low));
			,
				videoControlBar_selectmenuitem(qualitymenu, q1);
				videoControlBar_changequality_txt(get(quality_caption_high));
			);
		,
			set(layer[videoControlBar_quality].visible, false);
		);
	</action>


	<action name="videoControlBar_change_video_file">
		plugin[get(videointerface_video)].playvideo(%3, %4, get(plugin[get(videointerface_video)].ispaused), get(plugin[get(videointerface_video)].time));
		videoControlBar_deselectmenuitem(qualitymenu, q1);
		videoControlBar_deselectmenuitem(qualitymenu, q2);
		videoControlBar_selectmenuitem(qualitymenu, %1);
		set(videoControlBar_current_videoscene_quality, %5);
		videoControlBar_hidemenu(qualitymenu);
		videoControlBar_changequality_txt(%2);
	</action>


	<action name="videoControlBar_togglepause">
		videoControlBar_hidemenu(viewmenu);
		videoControlBar_hidemenu(qualitymenu);videointerface_togglepause();
	</action>


	<action name="videoControlBar_update_pausestate">
		if(plugin[get(videointerface_video)].ispaused,
			set(layer[videoControlBar_pp_button].tooltip, 'videoControlBarplay_tip');
			if(skin_newover_bt == 'videoControlBar_pp_button',
				txtadd(newcrop, '0|',get(skin_newover_part2),'|30|30');
				set(layer[videoControlBar_pp_button].crop, get(newcrop));
			,
				set(layer[videoControlBar_pp_button].crop, 0|0|30|30);
			);
		,
			set(layer[videoControlBar_pp_button].tooltip, 'videoControlBarpause_tip');
			if(skin_newover_bt == 'videoControlBar_pp_button',
				txtadd(newcrop, '30|',get(skin_newover_part2),'|30|30');
				set(layer[videoControlBar_pp_button].crop, get(newcrop));
			,
				set(layer[videoControlBar_pp_button].crop, 30|0|30|30);
			);
			if(layer[videoControlBar_splashscreen_image].visible,
				tween(layer[videoControlBar_splashscreen_image].alpha, 0.0, 0.25, default, 
					set(layer[videoControlBar_splashscreen_image].visible,false);
				);
			);
		);
		layer[videoControlBar_pp_button].onout();
		layer[videoControlBar_pp_button].onover();
	</action>


	<action name="videoControlBar_togglesound">
		videoControlBar_hidemenu(viewmenu);
		videoControlBar_hidemenu(qualitymenu);
		videoControlBar_update_soundstate();
	</action>


	<action name="videoControlBar_update_soundstate">
		set(newcrop, '');
		set(snd_iconpos, 210);

		if(plugin[get(videointerface_video)].volume GT 0,
			if(plugin[get(videointerface_video)].volume LT 0.4,
				set(snd_iconpos, 180);
				add(plugin[get(videointerface_video)].volume, 0.33);
				set(layer[videoControlBar_snd_button].tooltip, 'videoControlBarsound_high_tip');
			,
				if(plugin[get(videointerface_video)].volume LT 0.7,
					add(plugin[get(videointerface_video)].volume, 0.33);
					set(layer[videoControlBar_snd_button].tooltip, 'videoControlBarsound_mute_tip');
				,
					set(snd_iconpos, 120);
					set(plugin[get(videointerface_video)].volume, 0);
					set(layer[videoControlBar_snd_button].tooltip, 'videoControlBarsound_low_tip');
				);
			);

			if(skin_newover_bt == 'videoControlBar_snd_button',
				txtadd(newcrop, get(snd_iconpos),'|',get(skin_newover_part2),'|30|30');
				set(layer[videoControlBar_snd_button].crop, get(newcrop));
			,
				txtadd(newcrop, get(snd_iconpos),'|0|30|30');
				set(layer[videoControlBar_snd_button].crop, get(newcrop));
			);

		,
			if(skin_newover_bt == 'videoControlBar_snd_button',
				txtadd(newcrop, '150|',get(skin_newover_part2),'|30|30');
				set(layer[videoControlBar_snd_button].crop, get(newcrop));
			,
				set(layer[videoControlBar_snd_button].crop, 150|0|30|30);
			);
			set(plugin[get(videointerface_video)].volume, 0.33);
			set(layer[videoControlBar_snd_button].tooltip, 'videoControlBarsound_medium_tip');
		);
		layer[videoControlBar_snd_button].onout();
		layer[videoControlBar_snd_button].onover();
		delete(newcrop, snd_iconpos);
	</action>

  <!-- Hide / Show Thumbnails -->
  <action name="hideTourThumbnails">set(tour_displaythumbnails, false);events.dispatch(hidetourthumbnails);</action>
  <action name="showTourThumbnails">set(tour_displaythumbnails, true); events.dispatch(showtourthumbnails);</action>


  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>

  <action name="enableGyroscope">
    changeGyroscopeState(true);
  </action>
  <action name="disableGyroscope">
    changeGyroscopeState(false);
  </action>


<action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
</action>
<action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
</action>
<action name="viewControlZoomStop">
	set(fov_moveforce, 0);
</action>

<action name="viewControlMoveUp">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(isfullvertical == false AND calc(mod(view.vlookat, 90)-%2) LT view.vlookatmin,
				moveto(get(view.hlookat), get(view.vlookatmin));
			,
				moveto(get(view.hlookat), calc(mod(view.vlookat, 90)-%2));
			);
		,
			set(vlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveDown">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(sceneisfull360 == false AND calc(mod(view.vlookat, 90)+%2) GT view.vlookatmax,
				moveto(get(view.hlookat), get(view.vlookatmax));
			,
				moveto(get(view.hlookat), calc(mod(view.vlookat, 90)+%2));
			);
		,
			set(vlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveLeft">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat-%2) LT view.hlookatmin,
				moveto(get(view.hlookatmin), get(view.vlookat));
			,
				moveto(calc(view.hlookat-%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveHoriStop());
		);
	,
		set(hlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveRight">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat+%2) GT view.hlookatmax,
				moveto(get(view.hlookatmax), get(view.vlookat));
			,
				moveto(calc(view.hlookat+%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveHoriStop());
			
		);
	,
		set(hlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveHoriStop">
	set(hlookat_moveforce, 0);
</action>
<action name="viewControlMoveVertStop">
	set(vlookat_moveforce, 0);
</action>

	<!-- WebVR plugin for VR availability tests -->

	<plugin name="ptpvrmode" devices="html5" keep="true"
		url="%FIRSTXML%/graphics/webvr.js"
		mobilevr_support="true"
		mobilevr_fake_support="false"
		vr_cursor=""
		vr_cursor_enabled="false"
		onavailable="delayedcall(1, checkVrAvailability(););"
		onunavailable="checkVrUnavailable();"
		/>
	<action name="checkVrAvailability">
		if(plugin[ptpvrmode],
			if (plugin[ptpvrmode].isavailable,
				set(tour_vrdevices, true);
				events.dispatch(onvravailable);
			,
				set(tour_vrdevices, false);
			);
		,
			checkVrUnavailable();
		);
	</action>
	<action name="checkVrUnavailable">
		set(tour_vrdevices, false);
		events.dispatch(onvrunavailable);
	</action>
  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


  <!-- Share Tour -->
  <action name="shareTour">events.dispatch(onsharetour);</action>

<action name="setViewNormal">
	stopSetViewTweens();
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	set(view.fisheyefovlink, 0.5);
	set(view.fovmax, get(panoview.fovmax));
	tween(view.architectural, 0.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
	tween(view.fisheye, 0.0, distance(1.0, 0.45),
		set(view.stereographic,false);
	);
</action>

<krpano normalViewActivated="true" />
<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
	stoptween(view.pannini);
</action>

</krpano>